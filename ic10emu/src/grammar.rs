mod rich_types;

use rust_sitter::Spanned;

#[rust_sitter::grammar("ic10")]
mod ic10 {
    use super::rich_types::*;

    #[derive(PartialEq, Debug)]
    #[rust_sitter::language]
    pub struct Language {
        pub lines: Vec<Line>,
    }

    #[derive(PartialEq, Debug)]
    pub struct Line {
        pub code: Option<Code>,
        pub comment: Option<Comment>,
        pub _newline: NewLine,
    }

    // #[derive(Debug)]
    // #[rust_sitter::prec_left(1)]
    // pub enum LastLine {
    //     #[rust_sitter::prec_left(3)]
    //     Both(Code, Comment),
    //     #[rust_sitter::prec_left(2)]
    //     Code(Code),
    //     #[rust_sitter::prec_left(1)]
    //     Comment(Comment),
    // }

    #[derive(PartialEq, Debug)]
    pub enum Code {
        Instruction(Instruction),
        Label(Label),
    }

    #[derive(PartialEq, Debug)]
    pub struct Comment {
        #[rust_sitter::leaf(text = r"#")]
        pub _header: (),
        #[rust_sitter::leaf(pattern = r"[^\n\r]*", transform = |s| s.to_string() )]
        pub comment: String,
    }

    #[derive(PartialEq, Debug)]
    pub struct Instruction {
        pub instruction: InstructionOp,
        pub operands: Vec<Operand>,
    }

    #[derive(PartialEq, Debug)]
    pub enum Operand {
        RegisterSpec(
            #[rust_sitter::leaf(pattern = r"sp|r(?:a|r*)(?:[0-9]|1[0-7])", transform = |rs| Register::from_str(rs))]
             Register,
        ),
        DeviceSpec(
            #[rust_sitter::leaf(pattern = r"d(?:b|[0-5]|r*(?:[0-9]|1[0-7]))(?::[0-9]+)?", transform = |ds| DeviceSpec::from_str(ds))]
             DeviceSpec,
        ),
        Number(Number),
        LogicType(LogicType),
        Identifier(Identifier),
    }

    #[derive(PartialEq, Debug)]
    pub struct Label(pub Identifier, #[rust_sitter::leaf(text = r":")] pub ());

    #[derive(PartialEq, Debug)]
    pub struct Identifier(
        #[rust_sitter::leaf(pattern = r"[a-zA-Z_.][\w\d.]*", transform = |id| id.to_string())]
        pub  String,
    );

    #[derive(PartialEq, Debug)]
    pub struct HashPreProc {
        #[rust_sitter::leaf(text = "HASH(\"")]
        pub _head: (),
        #[rust_sitter::leaf(pattern = "[^\"\\n]*", transform = |s| HashString::from_str(s) )]
        pub string: HashString,
        #[rust_sitter::leaf(text = "\")")]
        pub _foot: (),
    }

    #[derive(PartialEq, Debug)]
    pub enum Number {
        Float(
            #[rust_sitter::leaf(pattern = r"-?[0-9]+(\.[0-9]+)?", transform = |f| f.parse().unwrap())]
             f64,
        ),
        Binary(
            #[rust_sitter::leaf(text = r"%")] (),
            #[rust_sitter::leaf(pattern = r"[01_]+", transform = |b| { 
                i64::from_str_radix(&b.replace("_", ""), 2).unwrap() as f64 
            } )]
            f64,
        ),
        Hexadecimal(
            #[rust_sitter::leaf(text = r"$")] (),
            #[rust_sitter::leaf(pattern = r"[0-9a-fA-F_]+", transform = |h| {
                i64::from_str_radix(&h.replace("_", ""), 16).unwrap() as f64
            } )]
            f64,
        ),
        Constant(Constant),
        String(HashPreProc),
        Enum(Enum),
    }

    #[derive(PartialEq, Debug)]
    #[rust_sitter::extra]
    struct Whitespace {
        #[rust_sitter::leaf(pattern = r"[\t ]+")]
        _whitespace: (),
    }

    #[derive(PartialEq, Debug)]
    pub struct NewLine {
        #[rust_sitter::leaf(pattern = r"\n|\r\n|\r")]
        pub _newline: (),
    }

    // WARNING !!! GENERATED CODE BLOW THIS POINT DO NOT MODIFY !!!
    // WARNING !!! COMMENTS USED AS MARKERS TO PATCH BEFORE GRAMMAR BUILD DO NOT REMOVE !!!
    // PATCH grammar/ic10/constants.rs
    // GENERATED CODE DO NOT MODIFY
    #[derive(PartialEq, Debug)]
    pub enum Constant {
         Nan( #[rust_sitter::leaf(text = "nan", transform = |s| s.to_string() )] String ),
         Pi( #[rust_sitter::leaf(text = "pi", transform = |s| s.to_string() )] String ),
         Pinf( #[rust_sitter::leaf(text = "pinf", transform = |s| s.to_string() )] String ),
         Rad2Deg( #[rust_sitter::leaf(text = "rad2deg", transform = |s| s.to_string() )] String ),
         Deg2Rad( #[rust_sitter::leaf(text = "deg2rad", transform = |s| s.to_string() )] String ),
         Ninf( #[rust_sitter::leaf(text = "ninf", transform = |s| s.to_string() )] String ),
         Epsilon( #[rust_sitter::leaf(text = "epsilon", transform = |s| s.to_string() )] String ),
    }
    // END PATCH grammar/ic10/constants.rs
    // PATCH grammar/ic10/logictypes.rs
    // GENERATED CODE DO NOT MODIFY
    #[derive(PartialEq, Debug)]
    pub enum LogicType {
         PressureInput2( #[rust_sitter::leaf(text = "PressureInput2", transform = |s| s.to_string() )] String ),
         TotalMolesOutput2( #[rust_sitter::leaf(text = "TotalMolesOutput2", transform = |s| s.to_string() )] String ),
         OperationalTemperatureEfficiency( #[rust_sitter::leaf(text = "OperationalTemperatureEfficiency", transform = |s| s.to_string() )] String ),
         SolarIrradiance( #[rust_sitter::leaf(text = "SolarIrradiance", transform = |s| s.to_string() )] String ),
         OverShootTarget( #[rust_sitter::leaf(text = "OverShootTarget", transform = |s| s.to_string() )] String ),
         TemperatureSetting( #[rust_sitter::leaf(text = "TemperatureSetting", transform = |s| s.to_string() )] String ),
         Harvest( #[rust_sitter::leaf(text = "Harvest", transform = |s| s.to_string() )] String ),
         PlantEfficiency4( #[rust_sitter::leaf(text = "PlantEfficiency4", transform = |s| s.to_string() )] String ),
         ExportQuantity( #[rust_sitter::leaf(text = "ExportQuantity", transform = |s| s.to_string() )] String ),
         Activate( #[rust_sitter::leaf(text = "Activate", transform = |s| s.to_string() )] String ),
         None( #[rust_sitter::leaf(text = "None", transform = |s| s.to_string() )] String ),
         ElevatorSpeed( #[rust_sitter::leaf(text = "ElevatorSpeed", transform = |s| s.to_string() )] String ),
         PressureSetting( #[rust_sitter::leaf(text = "PressureSetting", transform = |s| s.to_string() )] String ),
         RatioNitrousOxide( #[rust_sitter::leaf(text = "RatioNitrousOxide", transform = |s| s.to_string() )] String ),
         Reagents( #[rust_sitter::leaf(text = "Reagents", transform = |s| s.to_string() )] String ),
         Vertical( #[rust_sitter::leaf(text = "Vertical", transform = |s| s.to_string() )] String ),
         PositionY( #[rust_sitter::leaf(text = "PositionY", transform = |s| s.to_string() )] String ),
         RatioOxygen( #[rust_sitter::leaf(text = "RatioOxygen", transform = |s| s.to_string() )] String ),
         Sum( #[rust_sitter::leaf(text = "Sum", transform = |s| s.to_string() )] String ),
         PressureOutput2( #[rust_sitter::leaf(text = "PressureOutput2", transform = |s| s.to_string() )] String ),
         AutoLand( #[rust_sitter::leaf(text = "AutoLand", transform = |s| s.to_string() )] String ),
         Channel6( #[rust_sitter::leaf(text = "Channel6", transform = |s| s.to_string() )] String ),
         RatioOxygenOutput( #[rust_sitter::leaf(text = "RatioOxygenOutput", transform = |s| s.to_string() )] String ),
         Acceleration( #[rust_sitter::leaf(text = "Acceleration", transform = |s| s.to_string() )] String ),
         RatioLiquidNitrousOxideOutput2( #[rust_sitter::leaf(text = "RatioLiquidNitrousOxideOutput2", transform = |s| s.to_string() )] String ),
         Contents( #[rust_sitter::leaf(text = "Contents", transform = |s| s.to_string() )] String ),
         ImportQuantity( #[rust_sitter::leaf(text = "ImportQuantity", transform = |s| s.to_string() )] String ),
         RatioWaterOutput( #[rust_sitter::leaf(text = "RatioWaterOutput", transform = |s| s.to_string() )] String ),
         Color( #[rust_sitter::leaf(text = "Color", transform = |s| s.to_string() )] String ),
         RatioNitrogenOutput( #[rust_sitter::leaf(text = "RatioNitrogenOutput", transform = |s| s.to_string() )] String ),
         Temperature( #[rust_sitter::leaf(text = "Temperature", transform = |s| s.to_string() )] String ),
         Setting( #[rust_sitter::leaf(text = "Setting", transform = |s| s.to_string() )] String ),
         CompletionRatio( #[rust_sitter::leaf(text = "CompletionRatio", transform = |s| s.to_string() )] String ),
         PlantHealth4( #[rust_sitter::leaf(text = "PlantHealth4", transform = |s| s.to_string() )] String ),
         ReEntryAltitude( #[rust_sitter::leaf(text = "ReEntryAltitude", transform = |s| s.to_string() )] String ),
         PositionZ( #[rust_sitter::leaf(text = "PositionZ", transform = |s| s.to_string() )] String ),
         Stress( #[rust_sitter::leaf(text = "Stress", transform = |s| s.to_string() )] String ),
         RatioLiquidOxygenOutput( #[rust_sitter::leaf(text = "RatioLiquidOxygenOutput", transform = |s| s.to_string() )] String ),
         RatioNitrogenOutput2( #[rust_sitter::leaf(text = "RatioNitrogenOutput2", transform = |s| s.to_string() )] String ),
         TargetY( #[rust_sitter::leaf(text = "TargetY", transform = |s| s.to_string() )] String ),
         Health( #[rust_sitter::leaf(text = "Health", transform = |s| s.to_string() )] String ),
         RatioCarbonDioxideOutput2( #[rust_sitter::leaf(text = "RatioCarbonDioxideOutput2", transform = |s| s.to_string() )] String ),
         ImportCount( #[rust_sitter::leaf(text = "ImportCount", transform = |s| s.to_string() )] String ),
         CelestialParentHash( #[rust_sitter::leaf(text = "CelestialParentHash", transform = |s| s.to_string() )] String ),
         RatioNitrousOxideInput( #[rust_sitter::leaf(text = "RatioNitrousOxideInput", transform = |s| s.to_string() )] String ),
         PowerPotential( #[rust_sitter::leaf(text = "PowerPotential", transform = |s| s.to_string() )] String ),
         RatioLiquidPollutantOutput( #[rust_sitter::leaf(text = "RatioLiquidPollutantOutput", transform = |s| s.to_string() )] String ),
         RatioSteamInput2( #[rust_sitter::leaf(text = "RatioSteamInput2", transform = |s| s.to_string() )] String ),
         Volume( #[rust_sitter::leaf(text = "Volume", transform = |s| s.to_string() )] String ),
         RatioLiquidPollutant( #[rust_sitter::leaf(text = "RatioLiquidPollutant", transform = |s| s.to_string() )] String ),
         PowerActual( #[rust_sitter::leaf(text = "PowerActual", transform = |s| s.to_string() )] String ),
         WorkingGasEfficiency( #[rust_sitter::leaf(text = "WorkingGasEfficiency", transform = |s| s.to_string() )] String ),
         RatioOxygenInput2( #[rust_sitter::leaf(text = "RatioOxygenInput2", transform = |s| s.to_string() )] String ),
         CombustionOutput( #[rust_sitter::leaf(text = "CombustionOutput", transform = |s| s.to_string() )] String ),
         RatioLiquidNitrogenInput( #[rust_sitter::leaf(text = "RatioLiquidNitrogenInput", transform = |s| s.to_string() )] String ),
         RatioWaterOutput2( #[rust_sitter::leaf(text = "RatioWaterOutput2", transform = |s| s.to_string() )] String ),
         VelocityY( #[rust_sitter::leaf(text = "VelocityY", transform = |s| s.to_string() )] String ),
         PlantHealth3( #[rust_sitter::leaf(text = "PlantHealth3", transform = |s| s.to_string() )] String ),
         Open( #[rust_sitter::leaf(text = "Open", transform = |s| s.to_string() )] String ),
         DestinationCode( #[rust_sitter::leaf(text = "DestinationCode", transform = |s| s.to_string() )] String ),
         RecipeHash( #[rust_sitter::leaf(text = "RecipeHash", transform = |s| s.to_string() )] String ),
         Average( #[rust_sitter::leaf(text = "Average", transform = |s| s.to_string() )] String ),
         RatioLiquidNitrogen( #[rust_sitter::leaf(text = "RatioLiquidNitrogen", transform = |s| s.to_string() )] String ),
         SettingInput( #[rust_sitter::leaf(text = "SettingInput", transform = |s| s.to_string() )] String ),
         TemperatureDifferentialEfficiency( #[rust_sitter::leaf(text = "TemperatureDifferentialEfficiency", transform = |s| s.to_string() )] String ),
         CombustionInput( #[rust_sitter::leaf(text = "CombustionInput", transform = |s| s.to_string() )] String ),
         RatioCarbonDioxide( #[rust_sitter::leaf(text = "RatioCarbonDioxide", transform = |s| s.to_string() )] String ),
         Filtration( #[rust_sitter::leaf(text = "Filtration", transform = |s| s.to_string() )] String ),
         ForwardZ( #[rust_sitter::leaf(text = "ForwardZ", transform = |s| s.to_string() )] String ),
         RequestHash( #[rust_sitter::leaf(text = "RequestHash", transform = |s| s.to_string() )] String ),
         VelocityMagnitude( #[rust_sitter::leaf(text = "VelocityMagnitude", transform = |s| s.to_string() )] String ),
         Channel1( #[rust_sitter::leaf(text = "Channel1", transform = |s| s.to_string() )] String ),
         RatioSteam( #[rust_sitter::leaf(text = "RatioSteam", transform = |s| s.to_string() )] String ),
         RatioSteamOutput( #[rust_sitter::leaf(text = "RatioSteamOutput", transform = |s| s.to_string() )] String ),
         Channel2( #[rust_sitter::leaf(text = "Channel2", transform = |s| s.to_string() )] String ),
         SortingClass( #[rust_sitter::leaf(text = "SortingClass", transform = |s| s.to_string() )] String ),
         RatioOxygenOutput2( #[rust_sitter::leaf(text = "RatioOxygenOutput2", transform = |s| s.to_string() )] String ),
         TargetPadIndex( #[rust_sitter::leaf(text = "TargetPadIndex", transform = |s| s.to_string() )] String ),
         Required( #[rust_sitter::leaf(text = "Required", transform = |s| s.to_string() )] String ),
         VelocityRelativeZ( #[rust_sitter::leaf(text = "VelocityRelativeZ", transform = |s| s.to_string() )] String ),
         PassedMoles( #[rust_sitter::leaf(text = "PassedMoles", transform = |s| s.to_string() )] String ),
         RatioLiquidVolatilesOutput2( #[rust_sitter::leaf(text = "RatioLiquidVolatilesOutput2", transform = |s| s.to_string() )] String ),
         Class( #[rust_sitter::leaf(text = "Class", transform = |s| s.to_string() )] String ),
         ForwardX( #[rust_sitter::leaf(text = "ForwardX", transform = |s| s.to_string() )] String ),
         PlantHash4( #[rust_sitter::leaf(text = "PlantHash4", transform = |s| s.to_string() )] String ),
         CollectableGoods( #[rust_sitter::leaf(text = "CollectableGoods", transform = |s| s.to_string() )] String ),
         Combustion( #[rust_sitter::leaf(text = "Combustion", transform = |s| s.to_string() )] String ),
         PlantGrowth1( #[rust_sitter::leaf(text = "PlantGrowth1", transform = |s| s.to_string() )] String ),
         RatioLiquidOxygenOutput2( #[rust_sitter::leaf(text = "RatioLiquidOxygenOutput2", transform = |s| s.to_string() )] String ),
         Bypass( #[rust_sitter::leaf(text = "Bypass", transform = |s| s.to_string() )] String ),
         Occupied( #[rust_sitter::leaf(text = "Occupied", transform = |s| s.to_string() )] String ),
         VolumeOfLiquid( #[rust_sitter::leaf(text = "VolumeOfLiquid", transform = |s| s.to_string() )] String ),
         RatioNitrogen( #[rust_sitter::leaf(text = "RatioNitrogen", transform = |s| s.to_string() )] String ),
         ExportCount( #[rust_sitter::leaf(text = "ExportCount", transform = |s| s.to_string() )] String ),
         AlignmentError( #[rust_sitter::leaf(text = "AlignmentError", transform = |s| s.to_string() )] String ),
         RatioLiquidNitrogenOutput2( #[rust_sitter::leaf(text = "RatioLiquidNitrogenOutput2", transform = |s| s.to_string() )] String ),
         RatioLiquidOxygen( #[rust_sitter::leaf(text = "RatioLiquidOxygen", transform = |s| s.to_string() )] String ),
         ThrustToWeight( #[rust_sitter::leaf(text = "ThrustToWeight", transform = |s| s.to_string() )] String ),
         TargetZ( #[rust_sitter::leaf(text = "TargetZ", transform = |s| s.to_string() )] String ),
         SettingInputHash( #[rust_sitter::leaf(text = "SettingInputHash", transform = |s| s.to_string() )] String ),
         PlantGrowth2( #[rust_sitter::leaf(text = "PlantGrowth2", transform = |s| s.to_string() )] String ),
         WattsReachingContact( #[rust_sitter::leaf(text = "WattsReachingContact", transform = |s| s.to_string() )] String ),
         SoundAlert( #[rust_sitter::leaf(text = "SoundAlert", transform = |s| s.to_string() )] String ),
         CombustionInput2( #[rust_sitter::leaf(text = "CombustionInput2", transform = |s| s.to_string() )] String ),
         DistanceAu( #[rust_sitter::leaf(text = "DistanceAu", transform = |s| s.to_string() )] String ),
         SizeY( #[rust_sitter::leaf(text = "SizeY", transform = |s| s.to_string() )] String ),
         Power( #[rust_sitter::leaf(text = "Power", transform = |s| s.to_string() )] String ),
         PressureInput( #[rust_sitter::leaf(text = "PressureInput", transform = |s| s.to_string() )] String ),
         RatioNitrousOxideOutput2( #[rust_sitter::leaf(text = "RatioNitrousOxideOutput2", transform = |s| s.to_string() )] String ),
         PlantHash3( #[rust_sitter::leaf(text = "PlantHash3", transform = |s| s.to_string() )] String ),
         Horizontal( #[rust_sitter::leaf(text = "Horizontal", transform = |s| s.to_string() )] String ),
         PlantGrowth3( #[rust_sitter::leaf(text = "PlantGrowth3", transform = |s| s.to_string() )] String ),
         Minimum( #[rust_sitter::leaf(text = "Minimum", transform = |s| s.to_string() )] String ),
         ExportSlotHash( #[rust_sitter::leaf(text = "ExportSlotHash", transform = |s| s.to_string() )] String ),
         SolarConstant( #[rust_sitter::leaf(text = "SolarConstant", transform = |s| s.to_string() )] String ),
         PlantHash1( #[rust_sitter::leaf(text = "PlantHash1", transform = |s| s.to_string() )] String ),
         ChargeRatio( #[rust_sitter::leaf(text = "ChargeRatio", transform = |s| s.to_string() )] String ),
         RatioLiquidCarbonDioxideOutput2( #[rust_sitter::leaf(text = "RatioLiquidCarbonDioxideOutput2", transform = |s| s.to_string() )] String ),
         PressureExternal( #[rust_sitter::leaf(text = "PressureExternal", transform = |s| s.to_string() )] String ),
         Mass( #[rust_sitter::leaf(text = "Mass", transform = |s| s.to_string() )] String ),
         PressureOutput( #[rust_sitter::leaf(text = "PressureOutput", transform = |s| s.to_string() )] String ),
         PlantEfficiency3( #[rust_sitter::leaf(text = "PlantEfficiency3", transform = |s| s.to_string() )] String ),
         RatioLiquidPollutantInput( #[rust_sitter::leaf(text = "RatioLiquidPollutantInput", transform = |s| s.to_string() )] String ),
         AirRelease( #[rust_sitter::leaf(text = "AirRelease", transform = |s| s.to_string() )] String ),
         RatioWaterInput2( #[rust_sitter::leaf(text = "RatioWaterInput2", transform = |s| s.to_string() )] String ),
         ReferenceId( #[rust_sitter::leaf(text = "ReferenceId", transform = |s| s.to_string() )] String ),
         FlightControlRule( #[rust_sitter::leaf(text = "FlightControlRule", transform = |s| s.to_string() )] String ),
         VerticalRatio( #[rust_sitter::leaf(text = "VerticalRatio", transform = |s| s.to_string() )] String ),
         Throttle( #[rust_sitter::leaf(text = "Throttle", transform = |s| s.to_string() )] String ),
         Index( #[rust_sitter::leaf(text = "Index", transform = |s| s.to_string() )] String ),
         RatioLiquidCarbonDioxideInput( #[rust_sitter::leaf(text = "RatioLiquidCarbonDioxideInput", transform = |s| s.to_string() )] String ),
         Rpm( #[rust_sitter::leaf(text = "Rpm", transform = |s| s.to_string() )] String ),
         Channel5( #[rust_sitter::leaf(text = "Channel5", transform = |s| s.to_string() )] String ),
         Progress( #[rust_sitter::leaf(text = "Progress", transform = |s| s.to_string() )] String ),
         DryMass( #[rust_sitter::leaf(text = "DryMass", transform = |s| s.to_string() )] String ),
         Output( #[rust_sitter::leaf(text = "Output", transform = |s| s.to_string() )] String ),
         OrbitPeriod( #[rust_sitter::leaf(text = "OrbitPeriod", transform = |s| s.to_string() )] String ),
         RatioPollutantInput( #[rust_sitter::leaf(text = "RatioPollutantInput", transform = |s| s.to_string() )] String ),
         EnvironmentEfficiency( #[rust_sitter::leaf(text = "EnvironmentEfficiency", transform = |s| s.to_string() )] String ),
         NextWeatherEventTime( #[rust_sitter::leaf(text = "NextWeatherEventTime", transform = |s| s.to_string() )] String ),
         RatioCarbonDioxideInput2( #[rust_sitter::leaf(text = "RatioCarbonDioxideInput2", transform = |s| s.to_string() )] String ),
         MineablesInQueue( #[rust_sitter::leaf(text = "MineablesInQueue", transform = |s| s.to_string() )] String ),
         SizeZ( #[rust_sitter::leaf(text = "SizeZ", transform = |s| s.to_string() )] String ),
         RatioLiquidOxygenInput( #[rust_sitter::leaf(text = "RatioLiquidOxygenInput", transform = |s| s.to_string() )] String ),
         TemperatureInput2( #[rust_sitter::leaf(text = "TemperatureInput2", transform = |s| s.to_string() )] String ),
         TemperatureOutput( #[rust_sitter::leaf(text = "TemperatureOutput", transform = |s| s.to_string() )] String ),
         Lock( #[rust_sitter::leaf(text = "Lock", transform = |s| s.to_string() )] String ),
         DrillCondition( #[rust_sitter::leaf(text = "DrillCondition", transform = |s| s.to_string() )] String ),
         Unknown( #[rust_sitter::leaf(text = "Unknown", transform = |s| s.to_string() )] String ),
         RatioLiquidCarbonDioxide( #[rust_sitter::leaf(text = "RatioLiquidCarbonDioxide", transform = |s| s.to_string() )] String ),
         Channel( #[rust_sitter::leaf(text = "Channel", transform = |s| s.to_string() )] String ),
         RatioLiquidVolatilesInput2( #[rust_sitter::leaf(text = "RatioLiquidVolatilesInput2", transform = |s| s.to_string() )] String ),
         PlantEfficiency2( #[rust_sitter::leaf(text = "PlantEfficiency2", transform = |s| s.to_string() )] String ),
         ImportSlotHash( #[rust_sitter::leaf(text = "ImportSlotHash", transform = |s| s.to_string() )] String ),
         RatioPollutantInput2( #[rust_sitter::leaf(text = "RatioPollutantInput2", transform = |s| s.to_string() )] String ),
         RatioPollutantOutput2( #[rust_sitter::leaf(text = "RatioPollutantOutput2", transform = |s| s.to_string() )] String ),
         PlantGrowth4( #[rust_sitter::leaf(text = "PlantGrowth4", transform = |s| s.to_string() )] String ),
         MinimumWattsToContact( #[rust_sitter::leaf(text = "MinimumWattsToContact", transform = |s| s.to_string() )] String ),
         RatioLiquidCarbonDioxideOutput( #[rust_sitter::leaf(text = "RatioLiquidCarbonDioxideOutput", transform = |s| s.to_string() )] String ),
         Ratio( #[rust_sitter::leaf(text = "Ratio", transform = |s| s.to_string() )] String ),
         RatioVolatiles( #[rust_sitter::leaf(text = "RatioVolatiles", transform = |s| s.to_string() )] String ),
         RatioWater( #[rust_sitter::leaf(text = "RatioWater", transform = |s| s.to_string() )] String ),
         Fuel( #[rust_sitter::leaf(text = "Fuel", transform = |s| s.to_string() )] String ),
         PowerGeneration( #[rust_sitter::leaf(text = "PowerGeneration", transform = |s| s.to_string() )] String ),
         RatioLiquidVolatilesOutput( #[rust_sitter::leaf(text = "RatioLiquidVolatilesOutput", transform = |s| s.to_string() )] String ),
         VelocityRelativeX( #[rust_sitter::leaf(text = "VelocityRelativeX", transform = |s| s.to_string() )] String ),
         RatioVolatilesOutput( #[rust_sitter::leaf(text = "RatioVolatilesOutput", transform = |s| s.to_string() )] String ),
         CombustionOutput2( #[rust_sitter::leaf(text = "CombustionOutput2", transform = |s| s.to_string() )] String ),
         Efficiency( #[rust_sitter::leaf(text = "Efficiency", transform = |s| s.to_string() )] String ),
         VelocityRelativeY( #[rust_sitter::leaf(text = "VelocityRelativeY", transform = |s| s.to_string() )] String ),
         Weight( #[rust_sitter::leaf(text = "Weight", transform = |s| s.to_string() )] String ),
         RatioCarbonDioxideOutput( #[rust_sitter::leaf(text = "RatioCarbonDioxideOutput", transform = |s| s.to_string() )] String ),
         PlantHash2( #[rust_sitter::leaf(text = "PlantHash2", transform = |s| s.to_string() )] String ),
         PlantEfficiency1( #[rust_sitter::leaf(text = "PlantEfficiency1", transform = |s| s.to_string() )] String ),
         RatioNitrousOxideOutput( #[rust_sitter::leaf(text = "RatioNitrousOxideOutput", transform = |s| s.to_string() )] String ),
         RatioLiquidNitrogenOutput( #[rust_sitter::leaf(text = "RatioLiquidNitrogenOutput", transform = |s| s.to_string() )] String ),
         RatioVolatilesInput2( #[rust_sitter::leaf(text = "RatioVolatilesInput2", transform = |s| s.to_string() )] String ),
         ManualResearchRequiredPod( #[rust_sitter::leaf(text = "ManualResearchRequiredPod", transform = |s| s.to_string() )] String ),
         MinWattsToContact( #[rust_sitter::leaf(text = "MinWattsToContact", transform = |s| s.to_string() )] String ),
         RatioLiquidNitrogenInput2( #[rust_sitter::leaf(text = "RatioLiquidNitrogenInput2", transform = |s| s.to_string() )] String ),
         Channel0( #[rust_sitter::leaf(text = "Channel0", transform = |s| s.to_string() )] String ),
         SolarAngle( #[rust_sitter::leaf(text = "SolarAngle", transform = |s| s.to_string() )] String ),
         PressureAir( #[rust_sitter::leaf(text = "PressureAir", transform = |s| s.to_string() )] String ),
         Orientation( #[rust_sitter::leaf(text = "Orientation", transform = |s| s.to_string() )] String ),
         HorizontalRatio( #[rust_sitter::leaf(text = "HorizontalRatio", transform = |s| s.to_string() )] String ),
         RatioLiquidPollutantInput2( #[rust_sitter::leaf(text = "RatioLiquidPollutantInput2", transform = |s| s.to_string() )] String ),
         PowerRequired( #[rust_sitter::leaf(text = "PowerRequired", transform = |s| s.to_string() )] String ),
         SettingOutputHash( #[rust_sitter::leaf(text = "SettingOutputHash", transform = |s| s.to_string() )] String ),
         OccupantHash( #[rust_sitter::leaf(text = "OccupantHash", transform = |s| s.to_string() )] String ),
         TotalMolesInput( #[rust_sitter::leaf(text = "TotalMolesInput", transform = |s| s.to_string() )] String ),
         RatioLiquidNitrousOxide( #[rust_sitter::leaf(text = "RatioLiquidNitrousOxide", transform = |s| s.to_string() )] String ),
         RatioCarbonDioxideInput( #[rust_sitter::leaf(text = "RatioCarbonDioxideInput", transform = |s| s.to_string() )] String ),
         RatioLiquidCarbonDioxideInput2( #[rust_sitter::leaf(text = "RatioLiquidCarbonDioxideInput2", transform = |s| s.to_string() )] String ),
         RatioOxygenInput( #[rust_sitter::leaf(text = "RatioOxygenInput", transform = |s| s.to_string() )] String ),
         VelocityZ( #[rust_sitter::leaf(text = "VelocityZ", transform = |s| s.to_string() )] String ),
         RatioNitrogenInput2( #[rust_sitter::leaf(text = "RatioNitrogenInput2", transform = |s| s.to_string() )] String ),
         TemperatureExternal( #[rust_sitter::leaf(text = "TemperatureExternal", transform = |s| s.to_string() )] String ),
         PositionX( #[rust_sitter::leaf(text = "PositionX", transform = |s| s.to_string() )] String ),
         Mode( #[rust_sitter::leaf(text = "Mode", transform = |s| s.to_string() )] String ),
         TemperatureInput( #[rust_sitter::leaf(text = "TemperatureInput", transform = |s| s.to_string() )] String ),
         InterrogationProgress( #[rust_sitter::leaf(text = "InterrogationProgress", transform = |s| s.to_string() )] String ),
         PressureInternal( #[rust_sitter::leaf(text = "PressureInternal", transform = |s| s.to_string() )] String ),
         PrefabHash( #[rust_sitter::leaf(text = "PrefabHash", transform = |s| s.to_string() )] String ),
         Seeding( #[rust_sitter::leaf(text = "Seeding", transform = |s| s.to_string() )] String ),
         EntityState( #[rust_sitter::leaf(text = "EntityState", transform = |s| s.to_string() )] String ),
         Maximum( #[rust_sitter::leaf(text = "Maximum", transform = |s| s.to_string() )] String ),
         RatioLiquidPollutantOutput2( #[rust_sitter::leaf(text = "RatioLiquidPollutantOutput2", transform = |s| s.to_string() )] String ),
         RequiredPower( #[rust_sitter::leaf(text = "RequiredPower", transform = |s| s.to_string() )] String ),
         RatioNitrogenInput( #[rust_sitter::leaf(text = "RatioNitrogenInput", transform = |s| s.to_string() )] String ),
         TargetX( #[rust_sitter::leaf(text = "TargetX", transform = |s| s.to_string() )] String ),
         RatioLiquidOxygenInput2( #[rust_sitter::leaf(text = "RatioLiquidOxygenInput2", transform = |s| s.to_string() )] String ),
         Channel4( #[rust_sitter::leaf(text = "Channel4", transform = |s| s.to_string() )] String ),
         Bpm( #[rust_sitter::leaf(text = "Bpm", transform = |s| s.to_string() )] String ),
         ExportSlotOccupant( #[rust_sitter::leaf(text = "ExportSlotOccupant", transform = |s| s.to_string() )] String ),
         RatioPollutantOutput( #[rust_sitter::leaf(text = "RatioPollutantOutput", transform = |s| s.to_string() )] String ),
         SemiMajorAxis( #[rust_sitter::leaf(text = "SemiMajorAxis", transform = |s| s.to_string() )] String ),
         ContactTypeId( #[rust_sitter::leaf(text = "ContactTypeId", transform = |s| s.to_string() )] String ),
         Error( #[rust_sitter::leaf(text = "Error", transform = |s| s.to_string() )] String ),
         LineNumber( #[rust_sitter::leaf(text = "LineNumber", transform = |s| s.to_string() )] String ),
         ForceWrite( #[rust_sitter::leaf(text = "ForceWrite", transform = |s| s.to_string() )] String ),
         Pressure( #[rust_sitter::leaf(text = "Pressure", transform = |s| s.to_string() )] String ),
         SignalStrength( #[rust_sitter::leaf(text = "SignalStrength", transform = |s| s.to_string() )] String ),
         VelocityX( #[rust_sitter::leaf(text = "VelocityX", transform = |s| s.to_string() )] String ),
         RatioPollutant( #[rust_sitter::leaf(text = "RatioPollutant", transform = |s| s.to_string() )] String ),
         AutoShutOff( #[rust_sitter::leaf(text = "AutoShutOff", transform = |s| s.to_string() )] String ),
         CombustionLimiter( #[rust_sitter::leaf(text = "CombustionLimiter", transform = |s| s.to_string() )] String ),
         SizeX( #[rust_sitter::leaf(text = "SizeX", transform = |s| s.to_string() )] String ),
         Thrust( #[rust_sitter::leaf(text = "Thrust", transform = |s| s.to_string() )] String ),
         ForwardY( #[rust_sitter::leaf(text = "ForwardY", transform = |s| s.to_string() )] String ),
         RatioLiquidVolatilesInput( #[rust_sitter::leaf(text = "RatioLiquidVolatilesInput", transform = |s| s.to_string() )] String ),
         ImportSlotOccupant( #[rust_sitter::leaf(text = "ImportSlotOccupant", transform = |s| s.to_string() )] String ),
         TotalMolesInput2( #[rust_sitter::leaf(text = "TotalMolesInput2", transform = |s| s.to_string() )] String ),
         Quantity( #[rust_sitter::leaf(text = "Quantity", transform = |s| s.to_string() )] String ),
         RatioLiquidVolatiles( #[rust_sitter::leaf(text = "RatioLiquidVolatiles", transform = |s| s.to_string() )] String ),
         Growth( #[rust_sitter::leaf(text = "Growth", transform = |s| s.to_string() )] String ),
         Mature( #[rust_sitter::leaf(text = "Mature", transform = |s| s.to_string() )] String ),
         RatioLiquidNitrousOxideInput2( #[rust_sitter::leaf(text = "RatioLiquidNitrousOxideInput2", transform = |s| s.to_string() )] String ),
         RatioVolatilesOutput2( #[rust_sitter::leaf(text = "RatioVolatilesOutput2", transform = |s| s.to_string() )] String ),
         PressureEfficiency( #[rust_sitter::leaf(text = "PressureEfficiency", transform = |s| s.to_string() )] String ),
         ElevatorLevel( #[rust_sitter::leaf(text = "ElevatorLevel", transform = |s| s.to_string() )] String ),
         RatioLiquidNitrousOxideInput( #[rust_sitter::leaf(text = "RatioLiquidNitrousOxideInput", transform = |s| s.to_string() )] String ),
         MaxQuantity( #[rust_sitter::leaf(text = "MaxQuantity", transform = |s| s.to_string() )] String ),
         Flush( #[rust_sitter::leaf(text = "Flush", transform = |s| s.to_string() )] String ),
         RatioLiquidNitrousOxideOutput( #[rust_sitter::leaf(text = "RatioLiquidNitrousOxideOutput", transform = |s| s.to_string() )] String ),
         Channel7( #[rust_sitter::leaf(text = "Channel7", transform = |s| s.to_string() )] String ),
         CelestialHash( #[rust_sitter::leaf(text = "CelestialHash", transform = |s| s.to_string() )] String ),
         RatioSteamInput( #[rust_sitter::leaf(text = "RatioSteamInput", transform = |s| s.to_string() )] String ),
         Damage( #[rust_sitter::leaf(text = "Damage", transform = |s| s.to_string() )] String ),
         Apex( #[rust_sitter::leaf(text = "Apex", transform = |s| s.to_string() )] String ),
         ReturnFuelCost( #[rust_sitter::leaf(text = "ReturnFuelCost", transform = |s| s.to_string() )] String ),
         ExhaustVelocity( #[rust_sitter::leaf(text = "ExhaustVelocity", transform = |s| s.to_string() )] String ),
         RatioWaterInput( #[rust_sitter::leaf(text = "RatioWaterInput", transform = |s| s.to_string() )] String ),
         SettingOutput( #[rust_sitter::leaf(text = "SettingOutput", transform = |s| s.to_string() )] String ),
         TrueAnomaly( #[rust_sitter::leaf(text = "TrueAnomaly", transform = |s| s.to_string() )] String ),
         BurnTimeRemaining( #[rust_sitter::leaf(text = "BurnTimeRemaining", transform = |s| s.to_string() )] String ),
         CurrentResearchPodType( #[rust_sitter::leaf(text = "CurrentResearchPodType", transform = |s| s.to_string() )] String ),
         Recipe( #[rust_sitter::leaf(text = "Recipe", transform = |s| s.to_string() )] String ),
         On( #[rust_sitter::leaf(text = "On", transform = |s| s.to_string() )] String ),
         PressureWaste( #[rust_sitter::leaf(text = "PressureWaste", transform = |s| s.to_string() )] String ),
         Inclination( #[rust_sitter::leaf(text = "Inclination", transform = |s| s.to_string() )] String ),
         SignalId( #[rust_sitter::leaf(text = "SignalID", transform = |s| s.to_string() )] String ),
         Plant( #[rust_sitter::leaf(text = "Plant", transform = |s| s.to_string() )] String ),
         RatioNitrousOxideInput2( #[rust_sitter::leaf(text = "RatioNitrousOxideInput2", transform = |s| s.to_string() )] String ),
         Idle( #[rust_sitter::leaf(text = "Idle", transform = |s| s.to_string() )] String ),
         TemperatureOutput2( #[rust_sitter::leaf(text = "TemperatureOutput2", transform = |s| s.to_string() )] String ),
         MineablesInVicinity( #[rust_sitter::leaf(text = "MineablesInVicinity", transform = |s| s.to_string() )] String ),
         Channel3( #[rust_sitter::leaf(text = "Channel3", transform = |s| s.to_string() )] String ),
         Charge( #[rust_sitter::leaf(text = "Charge", transform = |s| s.to_string() )] String ),
         RatioVolatilesInput( #[rust_sitter::leaf(text = "RatioVolatilesInput", transform = |s| s.to_string() )] String ),
         Time( #[rust_sitter::leaf(text = "Time", transform = |s| s.to_string() )] String ),
         TotalMolesOutput( #[rust_sitter::leaf(text = "TotalMolesOutput", transform = |s| s.to_string() )] String ),
         FilterType( #[rust_sitter::leaf(text = "FilterType", transform = |s| s.to_string() )] String ),
         TotalMoles( #[rust_sitter::leaf(text = "TotalMoles", transform = |s| s.to_string() )] String ),
         Eccentricity( #[rust_sitter::leaf(text = "Eccentricity", transform = |s| s.to_string() )] String ),
         PlantHealth1( #[rust_sitter::leaf(text = "PlantHealth1", transform = |s| s.to_string() )] String ),
         TimeToDestination( #[rust_sitter::leaf(text = "TimeToDestination", transform = |s| s.to_string() )] String ),
         RatioSteamOutput2( #[rust_sitter::leaf(text = "RatioSteamOutput2", transform = |s| s.to_string() )] String ),
         PlantHealth2( #[rust_sitter::leaf(text = "PlantHealth2", transform = |s| s.to_string() )] String ),
         DistanceKm( #[rust_sitter::leaf(text = "DistanceKm", transform = |s| s.to_string() )] String ),
         ClearMemory( #[rust_sitter::leaf(text = "ClearMemory", transform = |s| s.to_string() )] String ),
    }
    // END PATCH grammar/ic10/logictypes.rs
    // PATCH grammar/ic10/enums.rs
    // GENERATED CODE DO NOT MODIFY
    #[derive(PartialEq, Debug)]
    pub enum Enum {
         LogicSlotTypePressure( #[rust_sitter::leaf(text = "LogicSlotType.Pressure", transform = |s| s.to_string() )] String ),
         LogicTypeOperationalTemperatureEfficiency( #[rust_sitter::leaf(text = "LogicType.OperationalTemperatureEfficiency", transform = |s| s.to_string() )] String ),
         SlotClassOrgan( #[rust_sitter::leaf(text = "SlotClass.Organ", transform = |s| s.to_string() )] String ),
         SlotClassDrillHead( #[rust_sitter::leaf(text = "SlotClass.DrillHead", transform = |s| s.to_string() )] String ),
         LogicTypeRatioCarbonDioxide( #[rust_sitter::leaf(text = "LogicType.RatioCarbonDioxide", transform = |s| s.to_string() )] String ),
         LogicTypeInclination( #[rust_sitter::leaf(text = "LogicType.Inclination", transform = |s| s.to_string() )] String ),
         LogicTypeRatioOxygenOutput2( #[rust_sitter::leaf(text = "LogicType.RatioOxygenOutput2", transform = |s| s.to_string() )] String ),
         ColorGreen( #[rust_sitter::leaf(text = "Color.Green", transform = |s| s.to_string() )] String ),
         SlotClassMotherboard( #[rust_sitter::leaf(text = "SlotClass.Motherboard", transform = |s| s.to_string() )] String ),
         LogicTypeSemiMajorAxis( #[rust_sitter::leaf(text = "LogicType.SemiMajorAxis", transform = |s| s.to_string() )] String ),
         LogicTypeCharge( #[rust_sitter::leaf(text = "LogicType.Charge", transform = |s| s.to_string() )] String ),
         LogicTypeRatioSteamInput( #[rust_sitter::leaf(text = "LogicType.RatioSteamInput", transform = |s| s.to_string() )] String ),
         LogicTypeRatioSteamOutput2( #[rust_sitter::leaf(text = "LogicType.RatioSteamOutput2", transform = |s| s.to_string() )] String ),
         LogicTypePassedMoles( #[rust_sitter::leaf(text = "LogicType.PassedMoles", transform = |s| s.to_string() )] String ),
         LogicTypeEccentricity( #[rust_sitter::leaf(text = "LogicType.Eccentricity", transform = |s| s.to_string() )] String ),
         LogicTypeRatioLiquidOxygen( #[rust_sitter::leaf(text = "LogicType.RatioLiquidOxygen", transform = |s| s.to_string() )] String ),
         LogicSlotTypeLineNumber( #[rust_sitter::leaf(text = "LogicSlotType.LineNumber", transform = |s| s.to_string() )] String ),
         RobotModeFollow( #[rust_sitter::leaf(text = "RobotMode.Follow", transform = |s| s.to_string() )] String ),
         ColorPink( #[rust_sitter::leaf(text = "Color.Pink", transform = |s| s.to_string() )] String ),
         Equals( #[rust_sitter::leaf(text = "Equals", transform = |s| s.to_string() )] String ),
         SortingClassAtmospherics( #[rust_sitter::leaf(text = "SortingClass.Atmospherics", transform = |s| s.to_string() )] String ),
         PowerModeCharging( #[rust_sitter::leaf(text = "PowerMode.Charging", transform = |s| s.to_string() )] String ),
         SlotClassGasFilter( #[rust_sitter::leaf(text = "SlotClass.GasFilter", transform = |s| s.to_string() )] String ),
         ColorBrown( #[rust_sitter::leaf(text = "Color.Brown", transform = |s| s.to_string() )] String ),
         LogicTypeHorizontalRatio( #[rust_sitter::leaf(text = "LogicType.HorizontalRatio", transform = |s| s.to_string() )] String ),
         LogicTypeRatioLiquidNitrogenInput2( #[rust_sitter::leaf(text = "LogicType.RatioLiquidNitrogenInput2", transform = |s| s.to_string() )] String ),
         LogicTypePlant( #[rust_sitter::leaf(text = "LogicType.Plant", transform = |s| s.to_string() )] String ),
         LogicTypeCombustionInput2( #[rust_sitter::leaf(text = "LogicType.CombustionInput2", transform = |s| s.to_string() )] String ),
         LogicSlotTypeFilterType( #[rust_sitter::leaf(text = "LogicSlotType.FilterType", transform = |s| s.to_string() )] String ),
         LogicTypePowerPotential( #[rust_sitter::leaf(text = "LogicType.PowerPotential", transform = |s| s.to_string() )] String ),
         LogicTypeOn( #[rust_sitter::leaf(text = "LogicType.On", transform = |s| s.to_string() )] String ),
         GasTypePollutant( #[rust_sitter::leaf(text = "GasType.Pollutant", transform = |s| s.to_string() )] String ),
         GasTypeNitrogen( #[rust_sitter::leaf(text = "GasType.Nitrogen", transform = |s| s.to_string() )] String ),
         LogicTypeVerticalRatio( #[rust_sitter::leaf(text = "LogicType.VerticalRatio", transform = |s| s.to_string() )] String ),
         AirConCold( #[rust_sitter::leaf(text = "AirCon.Cold", transform = |s| s.to_string() )] String ),
         LogicTypeEnvironmentEfficiency( #[rust_sitter::leaf(text = "LogicType.EnvironmentEfficiency", transform = |s| s.to_string() )] String ),
         LogicTypeRatioPollutantOutput( #[rust_sitter::leaf(text = "LogicType.RatioPollutantOutput", transform = |s| s.to_string() )] String ),
         LogicTypeRatioVolatilesOutput2( #[rust_sitter::leaf(text = "LogicType.RatioVolatilesOutput2", transform = |s| s.to_string() )] String ),
         LogicTypeLineNumber( #[rust_sitter::leaf(text = "LogicType.LineNumber", transform = |s| s.to_string() )] String ),
         LogicTypeCelestialParentHash( #[rust_sitter::leaf(text = "LogicType.CelestialParentHash", transform = |s| s.to_string() )] String ),
         LogicTypeStress( #[rust_sitter::leaf(text = "LogicType.Stress", transform = |s| s.to_string() )] String ),
         SlotClassProgrammableChip( #[rust_sitter::leaf(text = "SlotClass.ProgrammableChip", transform = |s| s.to_string() )] String ),
         LogicTypeRatioVolatilesInput( #[rust_sitter::leaf(text = "LogicType.RatioVolatilesInput", transform = |s| s.to_string() )] String ),
         LogicTypeTemperatureOutput2( #[rust_sitter::leaf(text = "LogicType.TemperatureOutput2", transform = |s| s.to_string() )] String ),
         LogicTypeMinimumWattsToContact( #[rust_sitter::leaf(text = "LogicType.MinimumWattsToContact", transform = |s| s.to_string() )] String ),
         GasTypeUndefined( #[rust_sitter::leaf(text = "GasType.Undefined", transform = |s| s.to_string() )] String ),
         LogicSlotTypeOccupantHash( #[rust_sitter::leaf(text = "LogicSlotType.OccupantHash", transform = |s| s.to_string() )] String ),
         GasTypeVolatiles( #[rust_sitter::leaf(text = "GasType.Volatiles", transform = |s| s.to_string() )] String ),
         AirConHot( #[rust_sitter::leaf(text = "AirCon.Hot", transform = |s| s.to_string() )] String ),
         AirControlNone( #[rust_sitter::leaf(text = "AirControl.None", transform = |s| s.to_string() )] String ),
         AirControlDraught( #[rust_sitter::leaf(text = "AirControl.Draught", transform = |s| s.to_string() )] String ),
         LogicTypeRatioWaterInput2( #[rust_sitter::leaf(text = "LogicType.RatioWaterInput2", transform = |s| s.to_string() )] String ),
         EntityStateAlive( #[rust_sitter::leaf(text = "EntityState.Alive", transform = |s| s.to_string() )] String ),
         LogicTypeColor( #[rust_sitter::leaf(text = "LogicType.Color", transform = |s| s.to_string() )] String ),
         SlotClassSensorProcessingUnit( #[rust_sitter::leaf(text = "SlotClass.SensorProcessingUnit", transform = |s| s.to_string() )] String ),
         LogicTypeVelocityRelativeY( #[rust_sitter::leaf(text = "LogicType.VelocityRelativeY", transform = |s| s.to_string() )] String ),
         SlotClassCircuitboard( #[rust_sitter::leaf(text = "SlotClass.Circuitboard", transform = |s| s.to_string() )] String ),
         LogicTypeChannel4( #[rust_sitter::leaf(text = "LogicType.Channel4", transform = |s| s.to_string() )] String ),
         LogicTypeForceWrite( #[rust_sitter::leaf(text = "LogicType.ForceWrite", transform = |s| s.to_string() )] String ),
         SortingClassTools( #[rust_sitter::leaf(text = "SortingClass.Tools", transform = |s| s.to_string() )] String ),
         LogicTypeWeight( #[rust_sitter::leaf(text = "LogicType.Weight", transform = |s| s.to_string() )] String ),
         LogicTypeReEntryAltitude( #[rust_sitter::leaf(text = "LogicType.ReEntryAltitude", transform = |s| s.to_string() )] String ),
         LogicTypeTemperatureOutput( #[rust_sitter::leaf(text = "LogicType.TemperatureOutput", transform = |s| s.to_string() )] String ),
         SortingClassIces( #[rust_sitter::leaf(text = "SortingClass.Ices", transform = |s| s.to_string() )] String ),
         SlotClassEgg( #[rust_sitter::leaf(text = "SlotClass.Egg", transform = |s| s.to_string() )] String ),
         LogicTypeFlush( #[rust_sitter::leaf(text = "LogicType.Flush", transform = |s| s.to_string() )] String ),
         LogicTypeBurnTimeRemaining( #[rust_sitter::leaf(text = "LogicType.BurnTimeRemaining", transform = |s| s.to_string() )] String ),
         GasTypeLiquidVolatiles( #[rust_sitter::leaf(text = "GasType.LiquidVolatiles", transform = |s| s.to_string() )] String ),
         SlotClassCreditCard( #[rust_sitter::leaf(text = "SlotClass.CreditCard", transform = |s| s.to_string() )] String ),
         ColorWhite( #[rust_sitter::leaf(text = "Color.White", transform = |s| s.to_string() )] String ),
         LogicTypeTimeToDestination( #[rust_sitter::leaf(text = "LogicType.TimeToDestination", transform = |s| s.to_string() )] String ),
         LogicTypePressureEfficiency( #[rust_sitter::leaf(text = "LogicType.PressureEfficiency", transform = |s| s.to_string() )] String ),
         SortingClassStorage( #[rust_sitter::leaf(text = "SortingClass.Storage", transform = |s| s.to_string() )] String ),
         LogicTypeForwardZ( #[rust_sitter::leaf(text = "LogicType.ForwardZ", transform = |s| s.to_string() )] String ),
         LogicTypeThrustToWeight( #[rust_sitter::leaf(text = "LogicType.ThrustToWeight", transform = |s| s.to_string() )] String ),
         LogicTypeDryMass( #[rust_sitter::leaf(text = "LogicType.DryMass", transform = |s| s.to_string() )] String ),
         LogicTypeReagents( #[rust_sitter::leaf(text = "LogicType.Reagents", transform = |s| s.to_string() )] String ),
         LogicTypeRatioNitrousOxideInput2( #[rust_sitter::leaf(text = "LogicType.RatioNitrousOxideInput2", transform = |s| s.to_string() )] String ),
         LogicTypeRatioPollutantOutput2( #[rust_sitter::leaf(text = "LogicType.RatioPollutantOutput2", transform = |s| s.to_string() )] String ),
         LogicTypeRatioSteam( #[rust_sitter::leaf(text = "LogicType.RatioSteam", transform = |s| s.to_string() )] String ),
         LogicTypeSizeX( #[rust_sitter::leaf(text = "LogicType.SizeX", transform = |s| s.to_string() )] String ),
         GasTypeOxygen( #[rust_sitter::leaf(text = "GasType.Oxygen", transform = |s| s.to_string() )] String ),
         LogicTypeRatioLiquidOxygenInput2( #[rust_sitter::leaf(text = "LogicType.RatioLiquidOxygenInput2", transform = |s| s.to_string() )] String ),
         ColorGray( #[rust_sitter::leaf(text = "Color.Gray", transform = |s| s.to_string() )] String ),
         LogicTypePressureInput2( #[rust_sitter::leaf(text = "LogicType.PressureInput2", transform = |s| s.to_string() )] String ),
         LogicTypeRatioVolatilesOutput( #[rust_sitter::leaf(text = "LogicType.RatioVolatilesOutput", transform = |s| s.to_string() )] String ),
         LogicTypeTotalMoles( #[rust_sitter::leaf(text = "LogicType.TotalMoles", transform = |s| s.to_string() )] String ),
         LogicTypeRatioLiquidOxygenOutput( #[rust_sitter::leaf(text = "LogicType.RatioLiquidOxygenOutput", transform = |s| s.to_string() )] String ),
         EntityStateDead( #[rust_sitter::leaf(text = "EntityState.Dead", transform = |s| s.to_string() )] String ),
         LogicTypeVelocityRelativeX( #[rust_sitter::leaf(text = "LogicType.VelocityRelativeX", transform = |s| s.to_string() )] String ),
         LogicTypePrefabHash( #[rust_sitter::leaf(text = "LogicType.PrefabHash", transform = |s| s.to_string() )] String ),
         LogicTypeRatioOxygenOutput( #[rust_sitter::leaf(text = "LogicType.RatioOxygenOutput", transform = |s| s.to_string() )] String ),
         LogicTypeRatioLiquidVolatilesOutput( #[rust_sitter::leaf(text = "LogicType.RatioLiquidVolatilesOutput", transform = |s| s.to_string() )] String ),
         SlotClassBottle( #[rust_sitter::leaf(text = "SlotClass.Bottle", transform = |s| s.to_string() )] String ),
         LogicTypeRatioCarbonDioxideOutput( #[rust_sitter::leaf(text = "LogicType.RatioCarbonDioxideOutput", transform = |s| s.to_string() )] String ),
         LogicTypeRatioWaterOutput2( #[rust_sitter::leaf(text = "LogicType.RatioWaterOutput2", transform = |s| s.to_string() )] String ),
         LogicTypeRatioNitrogenInput( #[rust_sitter::leaf(text = "LogicType.RatioNitrogenInput", transform = |s| s.to_string() )] String ),
         LogicTypeCombustionLimiter( #[rust_sitter::leaf(text = "LogicType.CombustionLimiter", transform = |s| s.to_string() )] String ),
         SlotClassBelt( #[rust_sitter::leaf(text = "SlotClass.Belt", transform = |s| s.to_string() )] String ),
         LogicTypeVolume( #[rust_sitter::leaf(text = "LogicType.Volume", transform = |s| s.to_string() )] String ),
         LogicTypeRatioNitrousOxide( #[rust_sitter::leaf(text = "LogicType.RatioNitrousOxide", transform = |s| s.to_string() )] String ),
         LogicTypeChannel3( #[rust_sitter::leaf(text = "LogicType.Channel3", transform = |s| s.to_string() )] String ),
         SlotClassBlocked( #[rust_sitter::leaf(text = "SlotClass.Blocked", transform = |s| s.to_string() )] String ),
         DaylightSensorModeVertical( #[rust_sitter::leaf(text = "DaylightSensorMode.Vertical", transform = |s| s.to_string() )] String ),
         LogicTypeSizeZ( #[rust_sitter::leaf(text = "LogicType.SizeZ", transform = |s| s.to_string() )] String ),
         LogicTypeRatioSteamOutput( #[rust_sitter::leaf(text = "LogicType.RatioSteamOutput", transform = |s| s.to_string() )] String ),
         LogicSlotTypeChargeRatio( #[rust_sitter::leaf(text = "LogicSlotType.ChargeRatio", transform = |s| s.to_string() )] String ),
         LogicTypeNextWeatherEventTime( #[rust_sitter::leaf(text = "LogicType.NextWeatherEventTime", transform = |s| s.to_string() )] String ),
         LogicSlotTypeCharge( #[rust_sitter::leaf(text = "LogicSlotType.Charge", transform = |s| s.to_string() )] String ),
         LogicTypePressureSetting( #[rust_sitter::leaf(text = "LogicType.PressureSetting", transform = |s| s.to_string() )] String ),
         SlotClassLiquidCanister( #[rust_sitter::leaf(text = "SlotClass.LiquidCanister", transform = |s| s.to_string() )] String ),
         GasTypeLiquidPollutant( #[rust_sitter::leaf(text = "GasType.LiquidPollutant", transform = |s| s.to_string() )] String ),
         LogicSlotTypeVolume( #[rust_sitter::leaf(text = "LogicSlotType.Volume", transform = |s| s.to_string() )] String ),
         LogicTypeCollectableGoods( #[rust_sitter::leaf(text = "LogicType.CollectableGoods", transform = |s| s.to_string() )] String ),
         SlotClassSuit( #[rust_sitter::leaf(text = "SlotClass.Suit", transform = |s| s.to_string() )] String ),
         GasTypeCarbonDioxide( #[rust_sitter::leaf(text = "GasType.CarbonDioxide", transform = |s| s.to_string() )] String ),
         ColorBlack( #[rust_sitter::leaf(text = "Color.Black", transform = |s| s.to_string() )] String ),
         Greater( #[rust_sitter::leaf(text = "Greater", transform = |s| s.to_string() )] String ),
         LogicTypeRatioCarbonDioxideInput( #[rust_sitter::leaf(text = "LogicType.RatioCarbonDioxideInput", transform = |s| s.to_string() )] String ),
         LogicTypeContactTypeId( #[rust_sitter::leaf(text = "LogicType.ContactTypeId", transform = |s| s.to_string() )] String ),
         RobotModeNone( #[rust_sitter::leaf(text = "RobotMode.None", transform = |s| s.to_string() )] String ),
         LogicTypeRatioCarbonDioxideOutput2( #[rust_sitter::leaf(text = "LogicType.RatioCarbonDioxideOutput2", transform = |s| s.to_string() )] String ),
         LogicTypeFlightControlRule( #[rust_sitter::leaf(text = "LogicType.FlightControlRule", transform = |s| s.to_string() )] String ),
         LogicTypeForwardX( #[rust_sitter::leaf(text = "LogicType.ForwardX", transform = |s| s.to_string() )] String ),
         RobotModeRoam( #[rust_sitter::leaf(text = "RobotMode.Roam", transform = |s| s.to_string() )] String ),
         SortingClassFood( #[rust_sitter::leaf(text = "SortingClass.Food", transform = |s| s.to_string() )] String ),
         LogicTypeVolumeOfLiquid( #[rust_sitter::leaf(text = "LogicType.VolumeOfLiquid", transform = |s| s.to_string() )] String ),
         LogicTypeHarvest( #[rust_sitter::leaf(text = "LogicType.Harvest", transform = |s| s.to_string() )] String ),
         LogicTypeCombustionOutput2( #[rust_sitter::leaf(text = "LogicType.CombustionOutput2", transform = |s| s.to_string() )] String ),
         ColorPurple( #[rust_sitter::leaf(text = "Color.Purple", transform = |s| s.to_string() )] String ),
         LogicTypeAcceleration( #[rust_sitter::leaf(text = "LogicType.Acceleration", transform = |s| s.to_string() )] String ),
         LogicTypeElevatorSpeed( #[rust_sitter::leaf(text = "LogicType.ElevatorSpeed", transform = |s| s.to_string() )] String ),
         LogicTypeRatioPollutant( #[rust_sitter::leaf(text = "LogicType.RatioPollutant", transform = |s| s.to_string() )] String ),
         LogicTypeHorizontal( #[rust_sitter::leaf(text = "LogicType.Horizontal", transform = |s| s.to_string() )] String ),
         VentInward( #[rust_sitter::leaf(text = "Vent.Inward", transform = |s| s.to_string() )] String ),
         LogicTypePressureInput( #[rust_sitter::leaf(text = "LogicType.PressureInput", transform = |s| s.to_string() )] String ),
         PowerModeCharged( #[rust_sitter::leaf(text = "PowerMode.Charged", transform = |s| s.to_string() )] String ),
         SortingClassResources( #[rust_sitter::leaf(text = "SortingClass.Resources", transform = |s| s.to_string() )] String ),
         LogicTypeCompletionRatio( #[rust_sitter::leaf(text = "LogicType.CompletionRatio", transform = |s| s.to_string() )] String ),
         SortingClassOres( #[rust_sitter::leaf(text = "SortingClass.Ores", transform = |s| s.to_string() )] String ),
         GasTypeLiquidNitrousOxide( #[rust_sitter::leaf(text = "GasType.LiquidNitrousOxide", transform = |s| s.to_string() )] String ),
         LogicTypeRatioNitrousOxideInput( #[rust_sitter::leaf(text = "LogicType.RatioNitrousOxideInput", transform = |s| s.to_string() )] String ),
         LogicTypeChannel2( #[rust_sitter::leaf(text = "LogicType.Channel2", transform = |s| s.to_string() )] String ),
         LogicTypeMaximum( #[rust_sitter::leaf(text = "LogicType.Maximum", transform = |s| s.to_string() )] String ),
         LogicTypeCombustionOutput( #[rust_sitter::leaf(text = "LogicType.CombustionOutput", transform = |s| s.to_string() )] String ),
         LogicTypeRatioPollutantInput( #[rust_sitter::leaf(text = "LogicType.RatioPollutantInput", transform = |s| s.to_string() )] String ),
         LogicTypeRatioLiquidNitrogenOutput( #[rust_sitter::leaf(text = "LogicType.RatioLiquidNitrogenOutput", transform = |s| s.to_string() )] String ),
         LogicTypeMineablesInVicinity( #[rust_sitter::leaf(text = "LogicType.MineablesInVicinity", transform = |s| s.to_string() )] String ),
         LogicTypeRatioWaterOutput( #[rust_sitter::leaf(text = "LogicType.RatioWaterOutput", transform = |s| s.to_string() )] String ),
         LogicTypeRatioLiquidCarbonDioxideOutput( #[rust_sitter::leaf(text = "LogicType.RatioLiquidCarbonDioxideOutput", transform = |s| s.to_string() )] String ),
         LogicTypeOpen( #[rust_sitter::leaf(text = "LogicType.Open", transform = |s| s.to_string() )] String ),
         LogicTypeRatioVolatiles( #[rust_sitter::leaf(text = "LogicType.RatioVolatiles", transform = |s| s.to_string() )] String ),
         LogicTypeVelocityY( #[rust_sitter::leaf(text = "LogicType.VelocityY", transform = |s| s.to_string() )] String ),
         LogicTypeRatioLiquidCarbonDioxideInput2( #[rust_sitter::leaf(text = "LogicType.RatioLiquidCarbonDioxideInput2", transform = |s| s.to_string() )] String ),
         LogicTypeIndex( #[rust_sitter::leaf(text = "LogicType.Index", transform = |s| s.to_string() )] String ),
         AirControlPressure( #[rust_sitter::leaf(text = "AirControl.Pressure", transform = |s| s.to_string() )] String ),
         RobotModeMoveToTarget( #[rust_sitter::leaf(text = "RobotMode.MoveToTarget", transform = |s| s.to_string() )] String ),
         SlotClassOre( #[rust_sitter::leaf(text = "SlotClass.Ore", transform = |s| s.to_string() )] String ),
         SlotClassHelmet( #[rust_sitter::leaf(text = "SlotClass.Helmet", transform = |s| s.to_string() )] String ),
         LogicTypePowerActual( #[rust_sitter::leaf(text = "LogicType.PowerActual", transform = |s| s.to_string() )] String ),
         LogicTypeRatioLiquidOxygenInput( #[rust_sitter::leaf(text = "LogicType.RatioLiquidOxygenInput", transform = |s| s.to_string() )] String ),
         LogicTypeAutoLand( #[rust_sitter::leaf(text = "LogicType.AutoLand", transform = |s| s.to_string() )] String ),
         LogicTypeSignalStrength( #[rust_sitter::leaf(text = "LogicType.SignalStrength", transform = |s| s.to_string() )] String ),
         GasTypeNitrousOxide( #[rust_sitter::leaf(text = "GasType.NitrousOxide", transform = |s| s.to_string() )] String ),
         LogicTypeMass( #[rust_sitter::leaf(text = "LogicType.Mass", transform = |s| s.to_string() )] String ),
         LogicTypeAlignmentError( #[rust_sitter::leaf(text = "LogicType.AlignmentError", transform = |s| s.to_string() )] String ),
         LogicTypePressureOutput( #[rust_sitter::leaf(text = "LogicType.PressureOutput", transform = |s| s.to_string() )] String ),
         LogicTypeTargetY( #[rust_sitter::leaf(text = "LogicType.TargetY", transform = |s| s.to_string() )] String ),
         PowerModeDischarged( #[rust_sitter::leaf(text = "PowerMode.Discharged", transform = |s| s.to_string() )] String ),
         LogicSlotTypeNone( #[rust_sitter::leaf(text = "LogicSlotType.None", transform = |s| s.to_string() )] String ),
         LogicTypeVelocityMagnitude( #[rust_sitter::leaf(text = "LogicType.VelocityMagnitude", transform = |s| s.to_string() )] String ),
         LogicTypeTotalMolesOutput2( #[rust_sitter::leaf(text = "LogicType.TotalMolesOutput2", transform = |s| s.to_string() )] String ),
         LogicTypeTemperatureSetting( #[rust_sitter::leaf(text = "LogicType.TemperatureSetting", transform = |s| s.to_string() )] String ),
         LogicTypePressure( #[rust_sitter::leaf(text = "LogicType.Pressure", transform = |s| s.to_string() )] String ),
         LogicTypeWorkingGasEfficiency( #[rust_sitter::leaf(text = "LogicType.WorkingGasEfficiency", transform = |s| s.to_string() )] String ),
         LogicTypeRatioLiquidNitrogenOutput2( #[rust_sitter::leaf(text = "LogicType.RatioLiquidNitrogenOutput2", transform = |s| s.to_string() )] String ),
         LogicTypeRatioLiquidNitrogen( #[rust_sitter::leaf(text = "LogicType.RatioLiquidNitrogen", transform = |s| s.to_string() )] String ),
         LogicTypeTemperatureExternal( #[rust_sitter::leaf(text = "LogicType.TemperatureExternal", transform = |s| s.to_string() )] String ),
         LogicTypeDrillCondition( #[rust_sitter::leaf(text = "LogicType.DrillCondition", transform = |s| s.to_string() )] String ),
         LogicSlotTypeReferenceId( #[rust_sitter::leaf(text = "LogicSlotType.ReferenceId", transform = |s| s.to_string() )] String ),
         LogicSlotTypeEfficiency( #[rust_sitter::leaf(text = "LogicSlotType.Efficiency", transform = |s| s.to_string() )] String ),
         LogicTypePressureInternal( #[rust_sitter::leaf(text = "LogicType.PressureInternal", transform = |s| s.to_string() )] String ),
         LogicTypeTrueAnomaly( #[rust_sitter::leaf(text = "LogicType.TrueAnomaly", transform = |s| s.to_string() )] String ),
         LogicSlotTypePrefabHash( #[rust_sitter::leaf(text = "LogicSlotType.PrefabHash", transform = |s| s.to_string() )] String ),
         LogicTypeRatioOxygenInput( #[rust_sitter::leaf(text = "LogicType.RatioOxygenInput", transform = |s| s.to_string() )] String ),
         LogicTypePressureExternal( #[rust_sitter::leaf(text = "LogicType.PressureExternal", transform = |s| s.to_string() )] String ),
         LogicTypeRatioNitrogenOutput2( #[rust_sitter::leaf(text = "LogicType.RatioNitrogenOutput2", transform = |s| s.to_string() )] String ),
         LogicSlotTypeMaxQuantity( #[rust_sitter::leaf(text = "LogicSlotType.MaxQuantity", transform = |s| s.to_string() )] String ),
         LogicTypeMineablesInQueue( #[rust_sitter::leaf(text = "LogicType.MineablesInQueue", transform = |s| s.to_string() )] String ),
         ColorKhaki( #[rust_sitter::leaf(text = "Color.Khaki", transform = |s| s.to_string() )] String ),
         LogicTypePressureOutput2( #[rust_sitter::leaf(text = "LogicType.PressureOutput2", transform = |s| s.to_string() )] String ),
         LogicTypeExhaustVelocity( #[rust_sitter::leaf(text = "LogicType.ExhaustVelocity", transform = |s| s.to_string() )] String ),
         SortingClassDefault( #[rust_sitter::leaf(text = "SortingClass.Default", transform = |s| s.to_string() )] String ),
         LogicTypeCombustion( #[rust_sitter::leaf(text = "LogicType.Combustion", transform = |s| s.to_string() )] String ),
         LogicTypeImportCount( #[rust_sitter::leaf(text = "LogicType.ImportCount", transform = |s| s.to_string() )] String ),
         LogicTypeOrientation( #[rust_sitter::leaf(text = "LogicType.Orientation", transform = |s| s.to_string() )] String ),
         LogicTypeSizeY( #[rust_sitter::leaf(text = "LogicType.SizeY", transform = |s| s.to_string() )] String ),
         LogicTypeChannel0( #[rust_sitter::leaf(text = "LogicType.Channel0", transform = |s| s.to_string() )] String ),
         SlotClassScanningHead( #[rust_sitter::leaf(text = "SlotClass.ScanningHead", transform = |s| s.to_string() )] String ),
         LogicTypeRatioNitrousOxideOutput2( #[rust_sitter::leaf(text = "LogicType.RatioNitrousOxideOutput2", transform = |s| s.to_string() )] String ),
         LogicTypeChannel1( #[rust_sitter::leaf(text = "LogicType.Channel1", transform = |s| s.to_string() )] String ),
         LogicTypeSetting( #[rust_sitter::leaf(text = "LogicType.Setting", transform = |s| s.to_string() )] String ),
         LogicSlotTypeTemperature( #[rust_sitter::leaf(text = "LogicSlotType.Temperature", transform = |s| s.to_string() )] String ),
         LogicTypeExportCount( #[rust_sitter::leaf(text = "LogicType.ExportCount", transform = |s| s.to_string() )] String ),
         LogicTypeReferenceId( #[rust_sitter::leaf(text = "LogicType.ReferenceId", transform = |s| s.to_string() )] String ),
         SlotClassDataDisk( #[rust_sitter::leaf(text = "SlotClass.DataDisk", transform = |s| s.to_string() )] String ),
         TransmitterModeActive( #[rust_sitter::leaf(text = "TransmitterMode.Active", transform = |s| s.to_string() )] String ),
         PowerModeIdle( #[rust_sitter::leaf(text = "PowerMode.Idle", transform = |s| s.to_string() )] String ),
         LogicTypeTime( #[rust_sitter::leaf(text = "LogicType.Time", transform = |s| s.to_string() )] String ),
         LogicTypeEntityState( #[rust_sitter::leaf(text = "LogicType.EntityState", transform = |s| s.to_string() )] String ),
         SlotClassAppliance( #[rust_sitter::leaf(text = "SlotClass.Appliance", transform = |s| s.to_string() )] String ),
         LogicTypeRatioLiquidVolatilesInput2( #[rust_sitter::leaf(text = "LogicType.RatioLiquidVolatilesInput2", transform = |s| s.to_string() )] String ),
         LogicTypeRatioOxygen( #[rust_sitter::leaf(text = "LogicType.RatioOxygen", transform = |s| s.to_string() )] String ),
         LogicTypeMode( #[rust_sitter::leaf(text = "LogicType.Mode", transform = |s| s.to_string() )] String ),
         LogicTypeTemperatureInput( #[rust_sitter::leaf(text = "LogicType.TemperatureInput", transform = |s| s.to_string() )] String ),
         LogicTypeRatioLiquidNitrousOxideInput2( #[rust_sitter::leaf(text = "LogicType.RatioLiquidNitrousOxideInput2", transform = |s| s.to_string() )] String ),
         LogicTypeTemperatureInput2( #[rust_sitter::leaf(text = "LogicType.TemperatureInput2", transform = |s| s.to_string() )] String ),
         LogicTypeTotalMolesInput( #[rust_sitter::leaf(text = "LogicType.TotalMolesInput", transform = |s| s.to_string() )] String ),
         LogicTypeIdle( #[rust_sitter::leaf(text = "LogicType.Idle", transform = |s| s.to_string() )] String ),
         LogicTypePower( #[rust_sitter::leaf(text = "LogicType.Power", transform = |s| s.to_string() )] String ),
         LogicTypeRatioVolatilesInput2( #[rust_sitter::leaf(text = "LogicType.RatioVolatilesInput2", transform = |s| s.to_string() )] String ),
         LogicTypeRatioLiquidNitrousOxideOutput2( #[rust_sitter::leaf(text = "LogicType.RatioLiquidNitrousOxideOutput2", transform = |s| s.to_string() )] String ),
         LogicSlotTypeClass( #[rust_sitter::leaf(text = "LogicSlotType.Class", transform = |s| s.to_string() )] String ),
         SlotClassLiquidBottle( #[rust_sitter::leaf(text = "SlotClass.LiquidBottle", transform = |s| s.to_string() )] String ),
         SlotClassPlant( #[rust_sitter::leaf(text = "SlotClass.Plant", transform = |s| s.to_string() )] String ),
         SlotClassGlasses( #[rust_sitter::leaf(text = "SlotClass.Glasses", transform = |s| s.to_string() )] String ),
         VentOutward( #[rust_sitter::leaf(text = "Vent.Outward", transform = |s| s.to_string() )] String ),
         LogicTypeThrottle( #[rust_sitter::leaf(text = "LogicType.Throttle", transform = |s| s.to_string() )] String ),
         Less( #[rust_sitter::leaf(text = "Less", transform = |s| s.to_string() )] String ),
         LogicTypeQuantity( #[rust_sitter::leaf(text = "LogicType.Quantity", transform = |s| s.to_string() )] String ),
         LogicTypeProgress( #[rust_sitter::leaf(text = "LogicType.Progress", transform = |s| s.to_string() )] String ),
         LogicTypeError( #[rust_sitter::leaf(text = "LogicType.Error", transform = |s| s.to_string() )] String ),
         SortingClassKits( #[rust_sitter::leaf(text = "SortingClass.Kits", transform = |s| s.to_string() )] String ),
         SlotClassUniform( #[rust_sitter::leaf(text = "SlotClass.Uniform", transform = |s| s.to_string() )] String ),
         LogicTypeChannel6( #[rust_sitter::leaf(text = "LogicType.Channel6", transform = |s| s.to_string() )] String ),
         LogicSlotTypeLock( #[rust_sitter::leaf(text = "LogicSlotType.Lock", transform = |s| s.to_string() )] String ),
         SlotClassBack( #[rust_sitter::leaf(text = "SlotClass.Back", transform = |s| s.to_string() )] String ),
         LogicTypeVertical( #[rust_sitter::leaf(text = "LogicType.Vertical", transform = |s| s.to_string() )] String ),
         GasTypeLiquidCarbonDioxide( #[rust_sitter::leaf(text = "GasType.LiquidCarbonDioxide", transform = |s| s.to_string() )] String ),
         LogicTypeSolarIrradiance( #[rust_sitter::leaf(text = "LogicType.SolarIrradiance", transform = |s| s.to_string() )] String ),
         LogicTypeRatioLiquidNitrogenInput( #[rust_sitter::leaf(text = "LogicType.RatioLiquidNitrogenInput", transform = |s| s.to_string() )] String ),
         LogicTypeRpm( #[rust_sitter::leaf(text = "LogicType.Rpm", transform = |s| s.to_string() )] String ),
         LogicTypeFiltration( #[rust_sitter::leaf(text = "LogicType.Filtration", transform = |s| s.to_string() )] String ),
         LogicTypeRatioLiquidNitrousOxide( #[rust_sitter::leaf(text = "LogicType.RatioLiquidNitrousOxide", transform = |s| s.to_string() )] String ),
         LogicTypeOrbitPeriod( #[rust_sitter::leaf(text = "LogicType.OrbitPeriod", transform = |s| s.to_string() )] String ),
         LogicTypePowerRequired( #[rust_sitter::leaf(text = "LogicType.PowerRequired", transform = |s| s.to_string() )] String ),
         LogicTypeRatioNitrogen( #[rust_sitter::leaf(text = "LogicType.RatioNitrogen", transform = |s| s.to_string() )] String ),
         LogicSlotTypeOpen( #[rust_sitter::leaf(text = "LogicSlotType.Open", transform = |s| s.to_string() )] String ),
         LogicTypeCurrentResearchPodType( #[rust_sitter::leaf(text = "LogicType.CurrentResearchPodType", transform = |s| s.to_string() )] String ),
         EntityStateUnconscious( #[rust_sitter::leaf(text = "EntityState.Unconscious", transform = |s| s.to_string() )] String ),
         LogicTypeSettingOutput( #[rust_sitter::leaf(text = "LogicType.SettingOutput", transform = |s| s.to_string() )] String ),
         LogicSlotTypeSeeding( #[rust_sitter::leaf(text = "LogicSlotType.Seeding", transform = |s| s.to_string() )] String ),
         ElevatorModeStationary( #[rust_sitter::leaf(text = "ElevatorMode.Stationary", transform = |s| s.to_string() )] String ),
         PowerModeDischarging( #[rust_sitter::leaf(text = "PowerMode.Discharging", transform = |s| s.to_string() )] String ),
         LogicTypeFuel( #[rust_sitter::leaf(text = "LogicType.Fuel", transform = |s| s.to_string() )] String ),
         LogicTypeSettingInput( #[rust_sitter::leaf(text = "LogicType.SettingInput", transform = |s| s.to_string() )] String ),
         LogicTypeVelocityZ( #[rust_sitter::leaf(text = "LogicType.VelocityZ", transform = |s| s.to_string() )] String ),
         LogicSlotTypeHealth( #[rust_sitter::leaf(text = "LogicSlotType.Health", transform = |s| s.to_string() )] String ),
         LogicSlotTypeSortingClass( #[rust_sitter::leaf(text = "LogicSlotType.SortingClass", transform = |s| s.to_string() )] String ),
         LogicTypeTargetX( #[rust_sitter::leaf(text = "LogicType.TargetX", transform = |s| s.to_string() )] String ),
         SlotClassIngot( #[rust_sitter::leaf(text = "SlotClass.Ingot", transform = |s| s.to_string() )] String ),
         LogicSlotTypeOn( #[rust_sitter::leaf(text = "LogicSlotType.On", transform = |s| s.to_string() )] String ),
         LogicTypeTargetZ( #[rust_sitter::leaf(text = "LogicType.TargetZ", transform = |s| s.to_string() )] String ),
         ColorYellow( #[rust_sitter::leaf(text = "Color.Yellow", transform = |s| s.to_string() )] String ),
         SlotClassTool( #[rust_sitter::leaf(text = "SlotClass.Tool", transform = |s| s.to_string() )] String ),
         DaylightSensorModeDefault( #[rust_sitter::leaf(text = "DaylightSensorMode.Default", transform = |s| s.to_string() )] String ),
         LogicSlotTypePressureWaste( #[rust_sitter::leaf(text = "LogicSlotType.PressureWaste", transform = |s| s.to_string() )] String ),
         LogicTypeRatioLiquidNitrousOxideOutput( #[rust_sitter::leaf(text = "LogicType.RatioLiquidNitrousOxideOutput", transform = |s| s.to_string() )] String ),
         SlotClassFlare( #[rust_sitter::leaf(text = "SlotClass.Flare", transform = |s| s.to_string() )] String ),
         LogicSlotTypeMature( #[rust_sitter::leaf(text = "LogicSlotType.Mature", transform = |s| s.to_string() )] String ),
         LogicTypeThrust( #[rust_sitter::leaf(text = "LogicType.Thrust", transform = |s| s.to_string() )] String ),
         LogicTypeRatio( #[rust_sitter::leaf(text = "LogicType.Ratio", transform = |s| s.to_string() )] String ),
         LogicTypeRatioLiquidNitrousOxideInput( #[rust_sitter::leaf(text = "LogicType.RatioLiquidNitrousOxideInput", transform = |s| s.to_string() )] String ),
         LogicTypeDistanceAu( #[rust_sitter::leaf(text = "LogicType.DistanceAu", transform = |s| s.to_string() )] String ),
         ElevatorModeDownward( #[rust_sitter::leaf(text = "ElevatorMode.Downward", transform = |s| s.to_string() )] String ),
         LogicTypeRatioNitrogenOutput( #[rust_sitter::leaf(text = "LogicType.RatioNitrogenOutput", transform = |s| s.to_string() )] String ),
         LogicTypeSoundAlert( #[rust_sitter::leaf(text = "LogicType.SoundAlert", transform = |s| s.to_string() )] String ),
         LogicTypeRatioLiquidVolatilesOutput2( #[rust_sitter::leaf(text = "LogicType.RatioLiquidVolatilesOutput2", transform = |s| s.to_string() )] String ),
         LogicTypeRatioLiquidVolatilesInput( #[rust_sitter::leaf(text = "LogicType.RatioLiquidVolatilesInput", transform = |s| s.to_string() )] String ),
         LogicTypeRatioLiquidPollutantOutput2( #[rust_sitter::leaf(text = "LogicType.RatioLiquidPollutantOutput2", transform = |s| s.to_string() )] String ),
         SlotClassDirtCanister( #[rust_sitter::leaf(text = "SlotClass.DirtCanister", transform = |s| s.to_string() )] String ),
         LogicTypeRatioLiquidVolatiles( #[rust_sitter::leaf(text = "LogicType.RatioLiquidVolatiles", transform = |s| s.to_string() )] String ),
         LogicTypeRatioLiquidOxygenOutput2( #[rust_sitter::leaf(text = "LogicType.RatioLiquidOxygenOutput2", transform = |s| s.to_string() )] String ),
         SortingClassAppliances( #[rust_sitter::leaf(text = "SortingClass.Appliances", transform = |s| s.to_string() )] String ),
         LogicTypeRatioOxygenInput2( #[rust_sitter::leaf(text = "LogicType.RatioOxygenInput2", transform = |s| s.to_string() )] String ),
         LogicTypeRatioLiquidCarbonDioxideOutput2( #[rust_sitter::leaf(text = "LogicType.RatioLiquidCarbonDioxideOutput2", transform = |s| s.to_string() )] String ),
         LogicTypeApex( #[rust_sitter::leaf(text = "LogicType.Apex", transform = |s| s.to_string() )] String ),
         LogicTypePositionX( #[rust_sitter::leaf(text = "LogicType.PositionX", transform = |s| s.to_string() )] String ),
         LogicTypeBpm( #[rust_sitter::leaf(text = "LogicType.Bpm", transform = |s| s.to_string() )] String ),
         LogicTypeRequestHash( #[rust_sitter::leaf(text = "LogicType.RequestHash", transform = |s| s.to_string() )] String ),
         LogicSlotTypeOccupied( #[rust_sitter::leaf(text = "LogicSlotType.Occupied", transform = |s| s.to_string() )] String ),
         LogicSlotTypeGrowth( #[rust_sitter::leaf(text = "LogicSlotType.Growth", transform = |s| s.to_string() )] String ),
         GasTypeLiquidNitrogen( #[rust_sitter::leaf(text = "GasType.LiquidNitrogen", transform = |s| s.to_string() )] String ),
         LogicTypeLock( #[rust_sitter::leaf(text = "LogicType.Lock", transform = |s| s.to_string() )] String ),
         ColorRed( #[rust_sitter::leaf(text = "Color.Red", transform = |s| s.to_string() )] String ),
         SortingClassClothing( #[rust_sitter::leaf(text = "SortingClass.Clothing", transform = |s| s.to_string() )] String ),
         LogicTypeCombustionInput( #[rust_sitter::leaf(text = "LogicType.CombustionInput", transform = |s| s.to_string() )] String ),
         LogicTypeOutput( #[rust_sitter::leaf(text = "LogicType.Output", transform = |s| s.to_string() )] String ),
         LogicTypeInterrogationProgress( #[rust_sitter::leaf(text = "LogicType.InterrogationProgress", transform = |s| s.to_string() )] String ),
         LogicTypeCelestialHash( #[rust_sitter::leaf(text = "LogicType.CelestialHash", transform = |s| s.to_string() )] String ),
         LogicTypeAutoShutOff( #[rust_sitter::leaf(text = "LogicType.AutoShutOff", transform = |s| s.to_string() )] String ),
         LogicTypeRatioWater( #[rust_sitter::leaf(text = "LogicType.RatioWater", transform = |s| s.to_string() )] String ),
         LogicTypeTotalMolesOutput( #[rust_sitter::leaf(text = "LogicType.TotalMolesOutput", transform = |s| s.to_string() )] String ),
         LogicTypeRatioNitrousOxideOutput( #[rust_sitter::leaf(text = "LogicType.RatioNitrousOxideOutput", transform = |s| s.to_string() )] String ),
         LogicTypeTemperature( #[rust_sitter::leaf(text = "LogicType.Temperature", transform = |s| s.to_string() )] String ),
         LogicTypeActivate( #[rust_sitter::leaf(text = "LogicType.Activate", transform = |s| s.to_string() )] String ),
         LogicTypeRatioCarbonDioxideInput2( #[rust_sitter::leaf(text = "LogicType.RatioCarbonDioxideInput2", transform = |s| s.to_string() )] String ),
         LogicTypeSolarAngle( #[rust_sitter::leaf(text = "LogicType.SolarAngle", transform = |s| s.to_string() )] String ),
         LogicTypeChannel5( #[rust_sitter::leaf(text = "LogicType.Channel5", transform = |s| s.to_string() )] String ),
         LogicTypeDistanceKm( #[rust_sitter::leaf(text = "LogicType.DistanceKm", transform = |s| s.to_string() )] String ),
         LogicTypeSignalId( #[rust_sitter::leaf(text = "LogicType.SignalID", transform = |s| s.to_string() )] String ),
         SlotClassTorpedo( #[rust_sitter::leaf(text = "SlotClass.Torpedo", transform = |s| s.to_string() )] String ),
         AirControlOffline( #[rust_sitter::leaf(text = "AirControl.Offline", transform = |s| s.to_string() )] String ),
         LogicSlotTypeQuantity( #[rust_sitter::leaf(text = "LogicSlotType.Quantity", transform = |s| s.to_string() )] String ),
         SlotClassSoundCartridge( #[rust_sitter::leaf(text = "SlotClass.SoundCartridge", transform = |s| s.to_string() )] String ),
         GasTypeWater( #[rust_sitter::leaf(text = "GasType.Water", transform = |s| s.to_string() )] String ),
         LogicTypeDestinationCode( #[rust_sitter::leaf(text = "LogicType.DestinationCode", transform = |s| s.to_string() )] String ),
         LogicTypeRatioNitrogenInput2( #[rust_sitter::leaf(text = "LogicType.RatioNitrogenInput2", transform = |s| s.to_string() )] String ),
         LogicTypeRatioLiquidCarbonDioxide( #[rust_sitter::leaf(text = "LogicType.RatioLiquidCarbonDioxide", transform = |s| s.to_string() )] String ),
         LogicTypeRatioLiquidCarbonDioxideInput( #[rust_sitter::leaf(text = "LogicType.RatioLiquidCarbonDioxideInput", transform = |s| s.to_string() )] String ),
         LogicTypeRatioLiquidPollutantInput( #[rust_sitter::leaf(text = "LogicType.RatioLiquidPollutantInput", transform = |s| s.to_string() )] String ),
         LogicTypeVelocityX( #[rust_sitter::leaf(text = "LogicType.VelocityX", transform = |s| s.to_string() )] String ),
         RobotModeStorageFull( #[rust_sitter::leaf(text = "RobotMode.StorageFull", transform = |s| s.to_string() )] String ),
         LogicTypeRatioPollutantInput2( #[rust_sitter::leaf(text = "LogicType.RatioPollutantInput2", transform = |s| s.to_string() )] String ),
         LogicTypeManualResearchRequiredPod( #[rust_sitter::leaf(text = "LogicType.ManualResearchRequiredPod", transform = |s| s.to_string() )] String ),
         LogicTypeTotalMolesInput2( #[rust_sitter::leaf(text = "LogicType.TotalMolesInput2", transform = |s| s.to_string() )] String ),
         LogicTypeRatioWaterInput( #[rust_sitter::leaf(text = "LogicType.RatioWaterInput", transform = |s| s.to_string() )] String ),
         LogicTypeTargetPadIndex( #[rust_sitter::leaf(text = "LogicType.TargetPadIndex", transform = |s| s.to_string() )] String ),
         LogicSlotTypeDamage( #[rust_sitter::leaf(text = "LogicSlotType.Damage", transform = |s| s.to_string() )] String ),
         SlotClassNone( #[rust_sitter::leaf(text = "SlotClass.None", transform = |s| s.to_string() )] String ),
         SlotClassAccessCard( #[rust_sitter::leaf(text = "SlotClass.AccessCard", transform = |s| s.to_string() )] String ),
         LogicTypeElevatorLevel( #[rust_sitter::leaf(text = "LogicType.ElevatorLevel", transform = |s| s.to_string() )] String ),
         SlotClassBattery( #[rust_sitter::leaf(text = "SlotClass.Battery", transform = |s| s.to_string() )] String ),
         ElevatorModeUpward( #[rust_sitter::leaf(text = "ElevatorMode.Upward", transform = |s| s.to_string() )] String ),
         ColorOrange( #[rust_sitter::leaf(text = "Color.Orange", transform = |s| s.to_string() )] String ),
         LogicTypeVelocityRelativeZ( #[rust_sitter::leaf(text = "LogicType.VelocityRelativeZ", transform = |s| s.to_string() )] String ),
         NotEquals( #[rust_sitter::leaf(text = "NotEquals", transform = |s| s.to_string() )] String ),
         SlotClassCircuit( #[rust_sitter::leaf(text = "SlotClass.Circuit", transform = |s| s.to_string() )] String ),
         LogicTypeRatioLiquidPollutantOutput( #[rust_sitter::leaf(text = "LogicType.RatioLiquidPollutantOutput", transform = |s| s.to_string() )] String ),
         LogicTypeWattsReachingContact( #[rust_sitter::leaf(text = "LogicType.WattsReachingContact", transform = |s| s.to_string() )] String ),
         LogicTypePositionZ( #[rust_sitter::leaf(text = "LogicType.PositionZ", transform = |s| s.to_string() )] String ),
         LogicTypeForwardY( #[rust_sitter::leaf(text = "LogicType.ForwardY", transform = |s| s.to_string() )] String ),
         GasTypeSteam( #[rust_sitter::leaf(text = "GasType.Steam", transform = |s| s.to_string() )] String ),
         SlotClassMagazine( #[rust_sitter::leaf(text = "SlotClass.Magazine", transform = |s| s.to_string() )] String ),
         LogicTypeTemperatureDifferentialEfficiency( #[rust_sitter::leaf(text = "LogicType.TemperatureDifferentialEfficiency", transform = |s| s.to_string() )] String ),
         LogicSlotTypePressureAir( #[rust_sitter::leaf(text = "LogicSlotType.PressureAir", transform = |s| s.to_string() )] String ),
         DaylightSensorModeHorizontal( #[rust_sitter::leaf(text = "DaylightSensorMode.Horizontal", transform = |s| s.to_string() )] String ),
         RobotModeUnload( #[rust_sitter::leaf(text = "RobotMode.Unload", transform = |s| s.to_string() )] String ),
         LogicTypeRatioLiquidPollutantInput2( #[rust_sitter::leaf(text = "LogicType.RatioLiquidPollutantInput2", transform = |s| s.to_string() )] String ),
         LogicTypeAirRelease( #[rust_sitter::leaf(text = "LogicType.AirRelease", transform = |s| s.to_string() )] String ),
         LogicTypeChannel7( #[rust_sitter::leaf(text = "LogicType.Channel7", transform = |s| s.to_string() )] String ),
         ColorBlue( #[rust_sitter::leaf(text = "Color.Blue", transform = |s| s.to_string() )] String ),
         EntityStateDecay( #[rust_sitter::leaf(text = "EntityState.Decay", transform = |s| s.to_string() )] String ),
         RobotModePathToTarget( #[rust_sitter::leaf(text = "RobotMode.PathToTarget", transform = |s| s.to_string() )] String ),
         LogicTypeRequiredPower( #[rust_sitter::leaf(text = "LogicType.RequiredPower", transform = |s| s.to_string() )] String ),
         LogicTypeReturnFuelCost( #[rust_sitter::leaf(text = "LogicType.ReturnFuelCost", transform = |s| s.to_string() )] String ),
         TransmitterModePassive( #[rust_sitter::leaf(text = "TransmitterMode.Passive", transform = |s| s.to_string() )] String ),
         LogicTypeRatioLiquidPollutant( #[rust_sitter::leaf(text = "LogicType.RatioLiquidPollutant", transform = |s| s.to_string() )] String ),
         LogicTypeRecipeHash( #[rust_sitter::leaf(text = "LogicType.RecipeHash", transform = |s| s.to_string() )] String ),
         SlotClassCartridge( #[rust_sitter::leaf(text = "SlotClass.Cartridge", transform = |s| s.to_string() )] String ),
         SlotClassWreckage( #[rust_sitter::leaf(text = "SlotClass.Wreckage", transform = |s| s.to_string() )] String ),
         LogicTypePowerGeneration( #[rust_sitter::leaf(text = "LogicType.PowerGeneration", transform = |s| s.to_string() )] String ),
         LogicTypeClearMemory( #[rust_sitter::leaf(text = "LogicType.ClearMemory", transform = |s| s.to_string() )] String ),
         LogicTypeRatioSteamInput2( #[rust_sitter::leaf(text = "LogicType.RatioSteamInput2", transform = |s| s.to_string() )] String ),
    }
    // END PATCH grammar/ic10/enums.rs
    // PATCH grammar/ic10/instructions.rs
    // GENERATED CODE DO NOT MODIFY
    #[derive(PartialEq, Debug)]
    pub enum InstructionOp {
         Acos( #[rust_sitter::leaf(text = "acos", transform = |s| s.to_string() )] String ),
         Breq( #[rust_sitter::leaf(text = "breq", transform = |s| s.to_string() )] String ),
         Hcf( #[rust_sitter::leaf(text = "hcf", transform = |s| s.to_string() )] String ),
         Jr( #[rust_sitter::leaf(text = "jr", transform = |s| s.to_string() )] String ),
         Brgtz( #[rust_sitter::leaf(text = "brgtz", transform = |s| s.to_string() )] String ),
         Mul( #[rust_sitter::leaf(text = "mul", transform = |s| s.to_string() )] String ),
         Atan2( #[rust_sitter::leaf(text = "atan2", transform = |s| s.to_string() )] String ),
         Blezal( #[rust_sitter::leaf(text = "blezal", transform = |s| s.to_string() )] String ),
         Slt( #[rust_sitter::leaf(text = "slt", transform = |s| s.to_string() )] String ),
         Bnezal( #[rust_sitter::leaf(text = "bnezal", transform = |s| s.to_string() )] String ),
         Sdse( #[rust_sitter::leaf(text = "sdse", transform = |s| s.to_string() )] String ),
         Sgez( #[rust_sitter::leaf(text = "sgez", transform = |s| s.to_string() )] String ),
         Snan( #[rust_sitter::leaf(text = "snan", transform = |s| s.to_string() )] String ),
         Lb( #[rust_sitter::leaf(text = "lb", transform = |s| s.to_string() )] String ),
         Bnez( #[rust_sitter::leaf(text = "bnez", transform = |s| s.to_string() )] String ),
         Pop( #[rust_sitter::leaf(text = "pop", transform = |s| s.to_string() )] String ),
         Put( #[rust_sitter::leaf(text = "put", transform = |s| s.to_string() )] String ),
         Snaz( #[rust_sitter::leaf(text = "snaz", transform = |s| s.to_string() )] String ),
         Xor( #[rust_sitter::leaf(text = "xor", transform = |s| s.to_string() )] String ),
         Sbs( #[rust_sitter::leaf(text = "sbs", transform = |s| s.to_string() )] String ),
         Or( #[rust_sitter::leaf(text = "or", transform = |s| s.to_string() )] String ),
         Log( #[rust_sitter::leaf(text = "log", transform = |s| s.to_string() )] String ),
         Bleal( #[rust_sitter::leaf(text = "bleal", transform = |s| s.to_string() )] String ),
         Brne( #[rust_sitter::leaf(text = "brne", transform = |s| s.to_string() )] String ),
         Bgtzal( #[rust_sitter::leaf(text = "bgtzal", transform = |s| s.to_string() )] String ),
         Lbn( #[rust_sitter::leaf(text = "lbn", transform = |s| s.to_string() )] String ),
         Lr( #[rust_sitter::leaf(text = "lr", transform = |s| s.to_string() )] String ),
         Snanz( #[rust_sitter::leaf(text = "snanz", transform = |s| s.to_string() )] String ),
         Bdnsal( #[rust_sitter::leaf(text = "bdnsal", transform = |s| s.to_string() )] String ),
         Brdns( #[rust_sitter::leaf(text = "brdns", transform = |s| s.to_string() )] String ),
         Bltz( #[rust_sitter::leaf(text = "bltz", transform = |s| s.to_string() )] String ),
         Tan( #[rust_sitter::leaf(text = "tan", transform = |s| s.to_string() )] String ),
         Sla( #[rust_sitter::leaf(text = "sla", transform = |s| s.to_string() )] String ),
         Bnan( #[rust_sitter::leaf(text = "bnan", transform = |s| s.to_string() )] String ),
         Seqz( #[rust_sitter::leaf(text = "seqz", transform = |s| s.to_string() )] String ),
         Bdse( #[rust_sitter::leaf(text = "bdse", transform = |s| s.to_string() )] String ),
         Push( #[rust_sitter::leaf(text = "push", transform = |s| s.to_string() )] String ),
         Sra( #[rust_sitter::leaf(text = "sra", transform = |s| s.to_string() )] String ),
         Bnaz( #[rust_sitter::leaf(text = "bnaz", transform = |s| s.to_string() )] String ),
         Select( #[rust_sitter::leaf(text = "select", transform = |s| s.to_string() )] String ),
         Poke( #[rust_sitter::leaf(text = "poke", transform = |s| s.to_string() )] String ),
         Sub( #[rust_sitter::leaf(text = "sub", transform = |s| s.to_string() )] String ),
         Bna( #[rust_sitter::leaf(text = "bna", transform = |s| s.to_string() )] String ),
         Bgtal( #[rust_sitter::leaf(text = "bgtal", transform = |s| s.to_string() )] String ),
         Yield( #[rust_sitter::leaf(text = "yield", transform = |s| s.to_string() )] String ),
         Bgeal( #[rust_sitter::leaf(text = "bgeal", transform = |s| s.to_string() )] String ),
         Lbs( #[rust_sitter::leaf(text = "lbs", transform = |s| s.to_string() )] String ),
         Atan( #[rust_sitter::leaf(text = "atan", transform = |s| s.to_string() )] String ),
         Brltz( #[rust_sitter::leaf(text = "brltz", transform = |s| s.to_string() )] String ),
         Bdseal( #[rust_sitter::leaf(text = "bdseal", transform = |s| s.to_string() )] String ),
         Blez( #[rust_sitter::leaf(text = "blez", transform = |s| s.to_string() )] String ),
         Brapz( #[rust_sitter::leaf(text = "brapz", transform = |s| s.to_string() )] String ),
         Bap( #[rust_sitter::leaf(text = "bap", transform = |s| s.to_string() )] String ),
         Div( #[rust_sitter::leaf(text = "div", transform = |s| s.to_string() )] String ),
         Ls( #[rust_sitter::leaf(text = "ls", transform = |s| s.to_string() )] String ),
         Brnaz( #[rust_sitter::leaf(text = "brnaz", transform = |s| s.to_string() )] String ),
         Ss( #[rust_sitter::leaf(text = "ss", transform = |s| s.to_string() )] String ),
         J( #[rust_sitter::leaf(text = "j", transform = |s| s.to_string() )] String ),
         Snez( #[rust_sitter::leaf(text = "snez", transform = |s| s.to_string() )] String ),
         Brnez( #[rust_sitter::leaf(text = "brnez", transform = |s| s.to_string() )] String ),
         Sltz( #[rust_sitter::leaf(text = "sltz", transform = |s| s.to_string() )] String ),
         Move( #[rust_sitter::leaf(text = "move", transform = |s| s.to_string() )] String ),
         Cos( #[rust_sitter::leaf(text = "cos", transform = |s| s.to_string() )] String ),
         Seq( #[rust_sitter::leaf(text = "seq", transform = |s| s.to_string() )] String ),
         Sqrt( #[rust_sitter::leaf(text = "sqrt", transform = |s| s.to_string() )] String ),
         Srl( #[rust_sitter::leaf(text = "srl", transform = |s| s.to_string() )] String ),
         Brgez( #[rust_sitter::leaf(text = "brgez", transform = |s| s.to_string() )] String ),
         Bgez( #[rust_sitter::leaf(text = "bgez", transform = |s| s.to_string() )] String ),
         Brlt( #[rust_sitter::leaf(text = "brlt", transform = |s| s.to_string() )] String ),
         Define( #[rust_sitter::leaf(text = "define", transform = |s| s.to_string() )] String ),
         Brle( #[rust_sitter::leaf(text = "brle", transform = |s| s.to_string() )] String ),
         Add( #[rust_sitter::leaf(text = "add", transform = |s| s.to_string() )] String ),
         Abs( #[rust_sitter::leaf(text = "abs", transform = |s| s.to_string() )] String ),
         Brna( #[rust_sitter::leaf(text = "brna", transform = |s| s.to_string() )] String ),
         Mod( #[rust_sitter::leaf(text = "mod", transform = |s| s.to_string() )] String ),
         Rand( #[rust_sitter::leaf(text = "rand", transform = |s| s.to_string() )] String ),
         Beq( #[rust_sitter::leaf(text = "beq", transform = |s| s.to_string() )] String ),
         Sd( #[rust_sitter::leaf(text = "sd", transform = |s| s.to_string() )] String ),
         Trunc( #[rust_sitter::leaf(text = "trunc", transform = |s| s.to_string() )] String ),
         Sna( #[rust_sitter::leaf(text = "sna", transform = |s| s.to_string() )] String ),
         Bnaal( #[rust_sitter::leaf(text = "bnaal", transform = |s| s.to_string() )] String ),
         Bgtz( #[rust_sitter::leaf(text = "bgtz", transform = |s| s.to_string() )] String ),
         Getd( #[rust_sitter::leaf(text = "getd", transform = |s| s.to_string() )] String ),
         Bne( #[rust_sitter::leaf(text = "bne", transform = |s| s.to_string() )] String ),
         Sgtz( #[rust_sitter::leaf(text = "sgtz", transform = |s| s.to_string() )] String ),
         Sll( #[rust_sitter::leaf(text = "sll", transform = |s| s.to_string() )] String ),
         Sleep( #[rust_sitter::leaf(text = "sleep", transform = |s| s.to_string() )] String ),
         Bge( #[rust_sitter::leaf(text = "bge", transform = |s| s.to_string() )] String ),
         Beqal( #[rust_sitter::leaf(text = "beqal", transform = |s| s.to_string() )] String ),
         Bltzal( #[rust_sitter::leaf(text = "bltzal", transform = |s| s.to_string() )] String ),
         Ceil( #[rust_sitter::leaf(text = "ceil", transform = |s| s.to_string() )] String ),
         Sap( #[rust_sitter::leaf(text = "sap", transform = |s| s.to_string() )] String ),
         Sin( #[rust_sitter::leaf(text = "sin", transform = |s| s.to_string() )] String ),
         Label( #[rust_sitter::leaf(text = "label", transform = |s| s.to_string() )] String ),
         Not( #[rust_sitter::leaf(text = "not", transform = |s| s.to_string() )] String ),
         Sne( #[rust_sitter::leaf(text = "sne", transform = |s| s.to_string() )] String ),
         Bneal( #[rust_sitter::leaf(text = "bneal", transform = |s| s.to_string() )] String ),
         Brlez( #[rust_sitter::leaf(text = "brlez", transform = |s| s.to_string() )] String ),
         Lbns( #[rust_sitter::leaf(text = "lbns", transform = |s| s.to_string() )] String ),
         Bapzal( #[rust_sitter::leaf(text = "bapzal", transform = |s| s.to_string() )] String ),
         Bgt( #[rust_sitter::leaf(text = "bgt", transform = |s| s.to_string() )] String ),
         Brdse( #[rust_sitter::leaf(text = "brdse", transform = |s| s.to_string() )] String ),
         Min( #[rust_sitter::leaf(text = "min", transform = |s| s.to_string() )] String ),
         Round( #[rust_sitter::leaf(text = "round", transform = |s| s.to_string() )] String ),
         Brgt( #[rust_sitter::leaf(text = "brgt", transform = |s| s.to_string() )] String ),
         Alias( #[rust_sitter::leaf(text = "alias", transform = |s| s.to_string() )] String ),
         Brap( #[rust_sitter::leaf(text = "brap", transform = |s| s.to_string() )] String ),
         Max( #[rust_sitter::leaf(text = "max", transform = |s| s.to_string() )] String ),
         Floor( #[rust_sitter::leaf(text = "floor", transform = |s| s.to_string() )] String ),
         Nor( #[rust_sitter::leaf(text = "nor", transform = |s| s.to_string() )] String ),
         Sgt( #[rust_sitter::leaf(text = "sgt", transform = |s| s.to_string() )] String ),
         Exp( #[rust_sitter::leaf(text = "exp", transform = |s| s.to_string() )] String ),
         Sge( #[rust_sitter::leaf(text = "sge", transform = |s| s.to_string() )] String ),
         Sle( #[rust_sitter::leaf(text = "sle", transform = |s| s.to_string() )] String ),
         Blt( #[rust_sitter::leaf(text = "blt", transform = |s| s.to_string() )] String ),
         Beqzal( #[rust_sitter::leaf(text = "beqzal", transform = |s| s.to_string() )] String ),
         Peek( #[rust_sitter::leaf(text = "peek", transform = |s| s.to_string() )] String ),
         Slez( #[rust_sitter::leaf(text = "slez", transform = |s| s.to_string() )] String ),
         Brnan( #[rust_sitter::leaf(text = "brnan", transform = |s| s.to_string() )] String ),
         And( #[rust_sitter::leaf(text = "and", transform = |s| s.to_string() )] String ),
         Putd( #[rust_sitter::leaf(text = "putd", transform = |s| s.to_string() )] String ),
         Ld( #[rust_sitter::leaf(text = "ld", transform = |s| s.to_string() )] String ),
         Asin( #[rust_sitter::leaf(text = "asin", transform = |s| s.to_string() )] String ),
         Bapz( #[rust_sitter::leaf(text = "bapz", transform = |s| s.to_string() )] String ),
         Ble( #[rust_sitter::leaf(text = "ble", transform = |s| s.to_string() )] String ),
         Bltal( #[rust_sitter::leaf(text = "bltal", transform = |s| s.to_string() )] String ),
         Bnazal( #[rust_sitter::leaf(text = "bnazal", transform = |s| s.to_string() )] String ),
         Sdns( #[rust_sitter::leaf(text = "sdns", transform = |s| s.to_string() )] String ),
         Get( #[rust_sitter::leaf(text = "get", transform = |s| s.to_string() )] String ),
         Jal( #[rust_sitter::leaf(text = "jal", transform = |s| s.to_string() )] String ),
         Sb( #[rust_sitter::leaf(text = "sb", transform = |s| s.to_string() )] String ),
         Bapal( #[rust_sitter::leaf(text = "bapal", transform = |s| s.to_string() )] String ),
         Bgezal( #[rust_sitter::leaf(text = "bgezal", transform = |s| s.to_string() )] String ),
         Breqz( #[rust_sitter::leaf(text = "breqz", transform = |s| s.to_string() )] String ),
         Beqz( #[rust_sitter::leaf(text = "beqz", transform = |s| s.to_string() )] String ),
         L( #[rust_sitter::leaf(text = "l", transform = |s| s.to_string() )] String ),
         Sbn( #[rust_sitter::leaf(text = "sbn", transform = |s| s.to_string() )] String ),
         S( #[rust_sitter::leaf(text = "s", transform = |s| s.to_string() )] String ),
         Sapz( #[rust_sitter::leaf(text = "sapz", transform = |s| s.to_string() )] String ),
         Bdns( #[rust_sitter::leaf(text = "bdns", transform = |s| s.to_string() )] String ),
         Brge( #[rust_sitter::leaf(text = "brge", transform = |s| s.to_string() )] String ),
    }
    // END PATCH grammar/ic10/instructions.rs
}

#[cfg(test)]
mod tests {
    use super::ic10::*;
    use super::rich_types::*;
    use super::*;

    #[test]
    fn successful_parse() {
        let parsed = ic10::parse("s d0 Setting 0 # This is a comment\n");
        dbg!(&parsed);
        assert_eq!(
            parsed.unwrap(),
            Language {
                lines: vec![Line {
                    code: Some(Code::Instruction(Instruction {
                        instruction: InstructionOp::S("s".to_string(),),
                        operands: vec![
                            Operand::DeviceSpec(DeviceSpec {
                                device: Device::Numbered(0),
                                channel: None,
                            },),
                            Operand::LogicType(
                                LogicType::Setting("Setting".to_string())
                            ),
                            Operand::Number(Number::Float(0.0,),),
                        ],
                    },),),
                    comment: Some(Comment { _header: (), comment: " This is a comment".to_string() }),
                    _newline: NewLine { _newline: () },
                },],
            }
        );
        let parsed = ic10::parse("move r0 $fff\n");
        dbg!(&parsed);
        assert_eq!(
            parsed.unwrap(),
            Language {
                lines: vec![Line {
                    code: Some(Code::Instruction(Instruction {
                        instruction: InstructionOp::Move("move".to_string(),),
                        operands: vec![
                            Operand::RegisterSpec(Register {
                                indirection: 0,
                                target: 0,
                            },),
                            Operand::Number(Number::Hexadecimal((), 4095.0,),),
                        ],
                    },),),
                    comment: None,
                    _newline: NewLine { _newline: () },
                },],
            }
        );

        // assert_eq!(, )
    }

    #[test]
    fn parse_code_chunk() {
        let code = "# This is a comment\n\
        define a_def 10\n\
        define a_hash HASH(\"This is a String\")\n\
        alias a_var r0\n\
        alias a_device d0\n\
        s d0 12 0 \n\
        move r2 LogicType.Temperature\n\
        move r3 pinf\n\
        main:\n\
        \n\
        l r1 dr15 RatioWater\n\
        move r0 HASH(\"AccessCardBlack\")\n\
        move r1 -2045627372 \n\
        move r1 $FF\n\
        move r1 %1000\n\
        yield\n\
        j main\n";
        let parsed = ic10::parse(code);
        dbg!(&parsed);
        assert_eq!(
            parsed.unwrap(),
            Language {
                lines: vec![
                    Line {
                        code: None,
                        comment: Some(Comment {
                            _header: (),
                            comment: " This is a comment".to_string(),
                        },),
                        _newline: NewLine { _newline: () },
                    },
                    Line {
                        code: Some(Code::Instruction(Instruction {
                            instruction: InstructionOp::Define("define".to_string(),),
                            operands: vec![
                                Operand::Identifier(Identifier("a_def".to_string(),),),
                                Operand::Number(Number::Float(10.0,),),
                            ],
                        },),),
                        comment: None,
                        _newline: NewLine { _newline: () },
                    },
                    Line {
                        code: Some(Code::Instruction(Instruction {
                            instruction: InstructionOp::Define("define".to_string(),),
                            operands: vec![
                                Operand::Identifier(Identifier("a_hash".to_string(),),),
                                Operand::Number(Number::String(HashPreProc {
                                    _head: (),
                                    string: HashString {
                                        string: "This is a String".to_string(),
                                        hash: 265971209,
                                    },
                                    _foot: (),
                                },),),
                            ],
                        },),),
                        comment: None,
                        _newline: NewLine { _newline: () },
                    },
                    Line {
                        code: Some(Code::Instruction(Instruction {
                            instruction: InstructionOp::Alias("alias".to_string(),),
                            operands: vec![
                                Operand::Identifier(Identifier("a_var".to_string(),),),
                                Operand::RegisterSpec(Register {
                                    indirection: 0,
                                    target: 0,
                                },),
                            ],
                        },),),
                        comment: None,
                        _newline: NewLine { _newline: () },
                    },
                    Line {
                        code: Some(Code::Instruction(Instruction {
                            instruction: InstructionOp::Alias("alias".to_string(),),
                            operands: vec![
                                Operand::Identifier(Identifier("a_device".to_string(),),),
                                Operand::DeviceSpec(DeviceSpec {
                                    device: Device::Numbered(0,),
                                    channel: None,
                                },),
                            ],
                        },),),
                        comment: None,
                        _newline: NewLine { _newline: () },
                    },
                    Line {
                        code: Some(Code::Instruction(Instruction {
                            instruction: InstructionOp::S("s".to_string(),),
                            operands: vec![
                                Operand::DeviceSpec(DeviceSpec {
                                    device: Device::Numbered(0,),
                                    channel: None,
                                },),
                                Operand::Number(Number::Float(12.0,),),
                                Operand::Number(Number::Float(0.0,),),
                            ],
                        },),),
                        comment: None,
                        _newline: NewLine { _newline: () },
                    },
                    Line {
                        code: Some(Code::Instruction(Instruction {
                            instruction: InstructionOp::Move("move".to_string(),),
                            operands: vec![
                                Operand::RegisterSpec(Register {
                                    indirection: 0,
                                    target: 2,
                                },),
                                Operand::Number(Number::Enum(Enum::LogicTypeTemperature(
                                    "LogicType.Temperature".to_string(),
                                ),),),
                            ],
                        },),),
                        comment: None,
                        _newline: NewLine { _newline: () },
                    },
                    Line {
                        code: Some(Code::Instruction(Instruction {
                            instruction: InstructionOp::Move("move".to_string(),),
                            operands: vec![
                                Operand::RegisterSpec(Register {
                                    indirection: 0,
                                    target: 3,
                                },),
                                Operand::Number(Number::Constant(Constant::Pinf(
                                    "pinf".to_string(),
                                ),),),
                            ],
                        },),),
                        comment: None,
                        _newline: NewLine { _newline: () },
                    },
                    Line {
                        code: Some(Code::Label(Label(Identifier("main".to_string(),), (),),),),
                        comment: None,
                        _newline: NewLine { _newline: () },
                    },
                    Line {
                        code: None,
                        comment: None,
                        _newline: NewLine {
                            _newline: (),
                        },
                    },
                    Line {
                        code: Some(Code::Instruction(Instruction {
                            instruction: InstructionOp::L("l".to_string(),),
                            operands: vec![
                                Operand::RegisterSpec(Register {
                                    indirection: 0,
                                    target: 1,
                                },),
                                Operand::DeviceSpec(DeviceSpec {
                                    device: Device::Indirect(Register {
                                        indirection: 0,
                                        target: 15,
                                    },),
                                    channel: None,
                                },),
                                Operand::LogicType(
                                    LogicType::RatioWater("RatioWater".to_string(),),
                                ),
                            ],
                        },),),
                        comment: None,
                        _newline: NewLine { _newline: () },
                    },
                    Line {
                        code: Some(Code::Instruction(Instruction {
                            instruction: InstructionOp::Move("move".to_string(),),
                            operands: vec![
                                Operand::RegisterSpec(Register {
                                    indirection: 0,
                                    target: 0,
                                },),
                                Operand::Number(Number::String(HashPreProc {
                                    _head: (),
                                    string: HashString {
                                        string: "AccessCardBlack".to_string(),
                                        hash: -1330388999,
                                    },
                                    _foot: (),
                                },),),
                            ],
                        },),),
                        comment: None,
                        _newline: NewLine { _newline: () },
                    },
                    Line {
                        code: Some(Code::Instruction(Instruction {
                            instruction: InstructionOp::Move("move".to_string(),),
                            operands: vec![
                                Operand::RegisterSpec(Register {
                                    indirection: 0,
                                    target: 1,
                                },),
                                Operand::Number(Number::Float(-2045627372.0,),),
                            ],
                        },),),
                        comment: None,
                        _newline: NewLine { _newline: () },
                    },
                    Line {
                        code: Some(Code::Instruction(Instruction {
                            instruction: InstructionOp::Move("move".to_string(),),
                            operands: vec![
                                Operand::RegisterSpec(Register {
                                    indirection: 0,
                                    target: 1,
                                },),
                                Operand::Number(Number::Hexadecimal((), 255.0,),),
                            ],
                        },),),
                        comment: None,
                        _newline: NewLine { _newline: () },
                    },
                    Line {
                        code: Some(Code::Instruction(Instruction {
                            instruction: InstructionOp::Move("move".to_string(),),
                            operands: vec![
                                Operand::RegisterSpec(Register {
                                    indirection: 0,
                                    target: 1,
                                },),
                                Operand::Number(Number::Binary((), 8.0,),),
                            ],
                        },),),
                        comment: None,
                        _newline: NewLine { _newline: () },
                    },
                    Line {
                        code: Some(Code::Instruction(Instruction {
                            instruction: InstructionOp::Yield("yield".to_string(),),
                            operands: vec![],
                        },),),
                        comment: None,
                        _newline: NewLine { _newline: () },
                    },
                    Line {
                        code: Some(Code::Instruction(Instruction {
                            instruction: InstructionOp::J("j".to_string(),),
                            operands: vec![Operand::Identifier(Identifier("main".to_string(),),),],
                        },),),
                        comment: None,
                        _newline: NewLine { _newline: () },
                    },
                ],
            },
        );
    }
}
